/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Hazelcast.Testing.Remote
{
  public partial class RemoteController
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<bool> ping(CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> clean(CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> exit(CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> createCluster(string hzVersion, string xmlconfig, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> createClusterKeepClusterName(string hzVersion, string xmlconfig, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Member> startMember(string clusterId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> shutdownMember(string clusterId, string memberId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> terminateMember(string clusterId, string memberId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> suspendMember(string clusterId, string memberId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> resumeMember(string clusterId, string memberId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> shutdownCluster(string clusterId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> terminateCluster(string clusterId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> splitMemberFromCluster(string memberId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> mergeMemberToCluster(string clusterId, string memberId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task loginToHazelcastCloud(string uri, string apiKey, string apiSecret, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> createHazelcastCloudStandardCluster(string hazelcastVersion, bool isTlsEnabled, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> createHazelcastCloudEnterpriseCluster(string cloudProvider, string hazelcastVersion, bool isTlsEnabled, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> scaleUpDownHazelcastCloudStandardCluster(string id, int scaleNumber, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> getHazelcastCloudCluster(string id, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> stopHazelcastCloudCluster(string id, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> resumeHazelcastCloudCluster(string id, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> deleteHazelcastCloudCluster(string id, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Response> executeOnController(string clusterId, string script, global::Hazelcast.Testing.Remote.Lang lang, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<bool> ping(CancellationToken cancellationToken = default)
      {
        await send_ping(cancellationToken);
        return await recv_ping(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_ping(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("ping", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp25 = new InternalStructs.ping_args() {
        };
        
        await tmp25.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_ping(CancellationToken cancellationToken = default)
      {
        
        var tmp26 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp26.Type == TMessageType.Exception)
        {
          var tmp27 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp27;
        }

        var tmp28 = new InternalStructs.ping_result();
        await tmp28.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp28.__isset.success)
        {
          return tmp28.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ping failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> clean(CancellationToken cancellationToken = default)
      {
        await send_clean(cancellationToken);
        return await recv_clean(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_clean(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("clean", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp29 = new InternalStructs.clean_args() {
        };
        
        await tmp29.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_clean(CancellationToken cancellationToken = default)
      {
        
        var tmp30 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp30.Type == TMessageType.Exception)
        {
          var tmp31 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp31;
        }

        var tmp32 = new InternalStructs.clean_result();
        await tmp32.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp32.__isset.success)
        {
          return tmp32.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "clean failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> exit(CancellationToken cancellationToken = default)
      {
        await send_exit(cancellationToken);
        return await recv_exit(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_exit(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("exit", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp33 = new InternalStructs.exit_args() {
        };
        
        await tmp33.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_exit(CancellationToken cancellationToken = default)
      {
        
        var tmp34 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp34.Type == TMessageType.Exception)
        {
          var tmp35 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp35;
        }

        var tmp36 = new InternalStructs.exit_result();
        await tmp36.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp36.__isset.success)
        {
          return tmp36.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exit failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> createCluster(string hzVersion, string xmlconfig, CancellationToken cancellationToken = default)
      {
        await send_createCluster(hzVersion, xmlconfig, cancellationToken);
        return await recv_createCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createCluster(string hzVersion, string xmlconfig, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp37 = new InternalStructs.createCluster_args() {
          HzVersion = hzVersion,
          Xmlconfig = xmlconfig,
        };
        
        await tmp37.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> recv_createCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp38 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp38.Type == TMessageType.Exception)
        {
          var tmp39 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp39;
        }

        var tmp40 = new InternalStructs.createCluster_result();
        await tmp40.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp40.__isset.success)
        {
          return tmp40.Success;
        }
        if (tmp40.__isset.serverException)
        {
          throw tmp40.ServerException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> createClusterKeepClusterName(string hzVersion, string xmlconfig, CancellationToken cancellationToken = default)
      {
        await send_createClusterKeepClusterName(hzVersion, xmlconfig, cancellationToken);
        return await recv_createClusterKeepClusterName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createClusterKeepClusterName(string hzVersion, string xmlconfig, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createClusterKeepClusterName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp41 = new InternalStructs.createClusterKeepClusterName_args() {
          HzVersion = hzVersion,
          Xmlconfig = xmlconfig,
        };
        
        await tmp41.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> recv_createClusterKeepClusterName(CancellationToken cancellationToken = default)
      {
        
        var tmp42 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp42.Type == TMessageType.Exception)
        {
          var tmp43 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp43;
        }

        var tmp44 = new InternalStructs.createClusterKeepClusterName_result();
        await tmp44.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp44.__isset.success)
        {
          return tmp44.Success;
        }
        if (tmp44.__isset.serverException)
        {
          throw tmp44.ServerException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createClusterKeepClusterName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Member> startMember(string clusterId, CancellationToken cancellationToken = default)
      {
        await send_startMember(clusterId, cancellationToken);
        return await recv_startMember(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_startMember(string clusterId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("startMember", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp45 = new InternalStructs.startMember_args() {
          ClusterId = clusterId,
        };
        
        await tmp45.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Member> recv_startMember(CancellationToken cancellationToken = default)
      {
        
        var tmp46 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp46.Type == TMessageType.Exception)
        {
          var tmp47 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp47;
        }

        var tmp48 = new InternalStructs.startMember_result();
        await tmp48.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp48.__isset.success)
        {
          return tmp48.Success;
        }
        if (tmp48.__isset.serverException)
        {
          throw tmp48.ServerException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "startMember failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> shutdownMember(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await send_shutdownMember(clusterId, memberId, cancellationToken);
        return await recv_shutdownMember(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_shutdownMember(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("shutdownMember", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp49 = new InternalStructs.shutdownMember_args() {
          ClusterId = clusterId,
          MemberId = memberId,
        };
        
        await tmp49.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_shutdownMember(CancellationToken cancellationToken = default)
      {
        
        var tmp50 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp50.Type == TMessageType.Exception)
        {
          var tmp51 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp51;
        }

        var tmp52 = new InternalStructs.shutdownMember_result();
        await tmp52.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp52.__isset.success)
        {
          return tmp52.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "shutdownMember failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> terminateMember(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await send_terminateMember(clusterId, memberId, cancellationToken);
        return await recv_terminateMember(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_terminateMember(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("terminateMember", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp53 = new InternalStructs.terminateMember_args() {
          ClusterId = clusterId,
          MemberId = memberId,
        };
        
        await tmp53.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_terminateMember(CancellationToken cancellationToken = default)
      {
        
        var tmp54 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp54.Type == TMessageType.Exception)
        {
          var tmp55 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp55;
        }

        var tmp56 = new InternalStructs.terminateMember_result();
        await tmp56.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp56.__isset.success)
        {
          return tmp56.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "terminateMember failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> suspendMember(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await send_suspendMember(clusterId, memberId, cancellationToken);
        return await recv_suspendMember(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_suspendMember(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("suspendMember", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp57 = new InternalStructs.suspendMember_args() {
          ClusterId = clusterId,
          MemberId = memberId,
        };
        
        await tmp57.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_suspendMember(CancellationToken cancellationToken = default)
      {
        
        var tmp58 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp58.Type == TMessageType.Exception)
        {
          var tmp59 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp59;
        }

        var tmp60 = new InternalStructs.suspendMember_result();
        await tmp60.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp60.__isset.success)
        {
          return tmp60.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "suspendMember failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> resumeMember(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await send_resumeMember(clusterId, memberId, cancellationToken);
        return await recv_resumeMember(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_resumeMember(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("resumeMember", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp61 = new InternalStructs.resumeMember_args() {
          ClusterId = clusterId,
          MemberId = memberId,
        };
        
        await tmp61.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_resumeMember(CancellationToken cancellationToken = default)
      {
        
        var tmp62 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp62.Type == TMessageType.Exception)
        {
          var tmp63 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp63;
        }

        var tmp64 = new InternalStructs.resumeMember_result();
        await tmp64.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp64.__isset.success)
        {
          return tmp64.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "resumeMember failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> shutdownCluster(string clusterId, CancellationToken cancellationToken = default)
      {
        await send_shutdownCluster(clusterId, cancellationToken);
        return await recv_shutdownCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_shutdownCluster(string clusterId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("shutdownCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp65 = new InternalStructs.shutdownCluster_args() {
          ClusterId = clusterId,
        };
        
        await tmp65.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_shutdownCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp66 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp66.Type == TMessageType.Exception)
        {
          var tmp67 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp67;
        }

        var tmp68 = new InternalStructs.shutdownCluster_result();
        await tmp68.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp68.__isset.success)
        {
          return tmp68.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "shutdownCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> terminateCluster(string clusterId, CancellationToken cancellationToken = default)
      {
        await send_terminateCluster(clusterId, cancellationToken);
        return await recv_terminateCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_terminateCluster(string clusterId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("terminateCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp69 = new InternalStructs.terminateCluster_args() {
          ClusterId = clusterId,
        };
        
        await tmp69.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_terminateCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp70 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp70.Type == TMessageType.Exception)
        {
          var tmp71 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp71;
        }

        var tmp72 = new InternalStructs.terminateCluster_result();
        await tmp72.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp72.__isset.success)
        {
          return tmp72.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "terminateCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> splitMemberFromCluster(string memberId, CancellationToken cancellationToken = default)
      {
        await send_splitMemberFromCluster(memberId, cancellationToken);
        return await recv_splitMemberFromCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_splitMemberFromCluster(string memberId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("splitMemberFromCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp73 = new InternalStructs.splitMemberFromCluster_args() {
          MemberId = memberId,
        };
        
        await tmp73.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> recv_splitMemberFromCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp74 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp74.Type == TMessageType.Exception)
        {
          var tmp75 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp75;
        }

        var tmp76 = new InternalStructs.splitMemberFromCluster_result();
        await tmp76.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp76.__isset.success)
        {
          return tmp76.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "splitMemberFromCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> mergeMemberToCluster(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await send_mergeMemberToCluster(clusterId, memberId, cancellationToken);
        return await recv_mergeMemberToCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_mergeMemberToCluster(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("mergeMemberToCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp77 = new InternalStructs.mergeMemberToCluster_args() {
          ClusterId = clusterId,
          MemberId = memberId,
        };
        
        await tmp77.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> recv_mergeMemberToCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp78 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp78.Type == TMessageType.Exception)
        {
          var tmp79 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp79;
        }

        var tmp80 = new InternalStructs.mergeMemberToCluster_result();
        await tmp80.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp80.__isset.success)
        {
          return tmp80.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "mergeMemberToCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task loginToHazelcastCloud(string uri, string apiKey, string apiSecret, CancellationToken cancellationToken = default)
      {
        await send_loginToHazelcastCloud(uri, apiKey, apiSecret, cancellationToken);
        await recv_loginToHazelcastCloud(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_loginToHazelcastCloud(string uri, string apiKey, string apiSecret, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("loginToHazelcastCloud", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp81 = new InternalStructs.loginToHazelcastCloud_args() {
          Uri = uri,
          ApiKey = apiKey,
          ApiSecret = apiSecret,
        };
        
        await tmp81.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_loginToHazelcastCloud(CancellationToken cancellationToken = default)
      {
        
        var tmp82 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp82.Type == TMessageType.Exception)
        {
          var tmp83 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp83;
        }

        var tmp84 = new InternalStructs.loginToHazelcastCloud_result();
        await tmp84.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> createHazelcastCloudStandardCluster(string hazelcastVersion, bool isTlsEnabled, CancellationToken cancellationToken = default)
      {
        await send_createHazelcastCloudStandardCluster(hazelcastVersion, isTlsEnabled, cancellationToken);
        return await recv_createHazelcastCloudStandardCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createHazelcastCloudStandardCluster(string hazelcastVersion, bool isTlsEnabled, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createHazelcastCloudStandardCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp85 = new InternalStructs.createHazelcastCloudStandardCluster_args() {
          HazelcastVersion = hazelcastVersion,
          IsTlsEnabled = isTlsEnabled,
        };
        
        await tmp85.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> recv_createHazelcastCloudStandardCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp86 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp86.Type == TMessageType.Exception)
        {
          var tmp87 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp87;
        }

        var tmp88 = new InternalStructs.createHazelcastCloudStandardCluster_result();
        await tmp88.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp88.__isset.success)
        {
          return tmp88.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createHazelcastCloudStandardCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> createHazelcastCloudEnterpriseCluster(string cloudProvider, string hazelcastVersion, bool isTlsEnabled, CancellationToken cancellationToken = default)
      {
        await send_createHazelcastCloudEnterpriseCluster(cloudProvider, hazelcastVersion, isTlsEnabled, cancellationToken);
        return await recv_createHazelcastCloudEnterpriseCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createHazelcastCloudEnterpriseCluster(string cloudProvider, string hazelcastVersion, bool isTlsEnabled, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createHazelcastCloudEnterpriseCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp89 = new InternalStructs.createHazelcastCloudEnterpriseCluster_args() {
          CloudProvider = cloudProvider,
          HazelcastVersion = hazelcastVersion,
          IsTlsEnabled = isTlsEnabled,
        };
        
        await tmp89.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> recv_createHazelcastCloudEnterpriseCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp90 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp90.Type == TMessageType.Exception)
        {
          var tmp91 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp91;
        }

        var tmp92 = new InternalStructs.createHazelcastCloudEnterpriseCluster_result();
        await tmp92.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp92.__isset.success)
        {
          return tmp92.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createHazelcastCloudEnterpriseCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> scaleUpDownHazelcastCloudStandardCluster(string id, int scaleNumber, CancellationToken cancellationToken = default)
      {
        await send_scaleUpDownHazelcastCloudStandardCluster(id, scaleNumber, cancellationToken);
        return await recv_scaleUpDownHazelcastCloudStandardCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_scaleUpDownHazelcastCloudStandardCluster(string id, int scaleNumber, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("scaleUpDownHazelcastCloudStandardCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp93 = new InternalStructs.scaleUpDownHazelcastCloudStandardCluster_args() {
          Id = id,
          ScaleNumber = scaleNumber,
        };
        
        await tmp93.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_scaleUpDownHazelcastCloudStandardCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp94 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp94.Type == TMessageType.Exception)
        {
          var tmp95 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp95;
        }

        var tmp96 = new InternalStructs.scaleUpDownHazelcastCloudStandardCluster_result();
        await tmp96.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp96.__isset.success)
        {
          return tmp96.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scaleUpDownHazelcastCloudStandardCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> getHazelcastCloudCluster(string id, CancellationToken cancellationToken = default)
      {
        await send_getHazelcastCloudCluster(id, cancellationToken);
        return await recv_getHazelcastCloudCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getHazelcastCloudCluster(string id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getHazelcastCloudCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp97 = new InternalStructs.getHazelcastCloudCluster_args() {
          Id = id,
        };
        
        await tmp97.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> recv_getHazelcastCloudCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp98 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp98.Type == TMessageType.Exception)
        {
          var tmp99 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp99;
        }

        var tmp100 = new InternalStructs.getHazelcastCloudCluster_result();
        await tmp100.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp100.__isset.success)
        {
          return tmp100.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getHazelcastCloudCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> stopHazelcastCloudCluster(string id, CancellationToken cancellationToken = default)
      {
        await send_stopHazelcastCloudCluster(id, cancellationToken);
        return await recv_stopHazelcastCloudCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_stopHazelcastCloudCluster(string id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("stopHazelcastCloudCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp101 = new InternalStructs.stopHazelcastCloudCluster_args() {
          Id = id,
        };
        
        await tmp101.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> recv_stopHazelcastCloudCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp102 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp102.Type == TMessageType.Exception)
        {
          var tmp103 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp103;
        }

        var tmp104 = new InternalStructs.stopHazelcastCloudCluster_result();
        await tmp104.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp104.__isset.success)
        {
          return tmp104.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "stopHazelcastCloudCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> resumeHazelcastCloudCluster(string id, CancellationToken cancellationToken = default)
      {
        await send_resumeHazelcastCloudCluster(id, cancellationToken);
        return await recv_resumeHazelcastCloudCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_resumeHazelcastCloudCluster(string id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("resumeHazelcastCloudCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp105 = new InternalStructs.resumeHazelcastCloudCluster_args() {
          Id = id,
        };
        
        await tmp105.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> recv_resumeHazelcastCloudCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp106 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp106.Type == TMessageType.Exception)
        {
          var tmp107 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp107;
        }

        var tmp108 = new InternalStructs.resumeHazelcastCloudCluster_result();
        await tmp108.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp108.__isset.success)
        {
          return tmp108.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "resumeHazelcastCloudCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> deleteHazelcastCloudCluster(string id, CancellationToken cancellationToken = default)
      {
        await send_deleteHazelcastCloudCluster(id, cancellationToken);
        return await recv_deleteHazelcastCloudCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deleteHazelcastCloudCluster(string id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteHazelcastCloudCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp109 = new InternalStructs.deleteHazelcastCloudCluster_args() {
          Id = id,
        };
        
        await tmp109.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_deleteHazelcastCloudCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp110 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp110.Type == TMessageType.Exception)
        {
          var tmp111 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp111;
        }

        var tmp112 = new InternalStructs.deleteHazelcastCloudCluster_result();
        await tmp112.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp112.__isset.success)
        {
          return tmp112.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteHazelcastCloudCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Response> executeOnController(string clusterId, string script, global::Hazelcast.Testing.Remote.Lang lang, CancellationToken cancellationToken = default)
      {
        await send_executeOnController(clusterId, script, lang, cancellationToken);
        return await recv_executeOnController(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_executeOnController(string clusterId, string script, global::Hazelcast.Testing.Remote.Lang lang, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("executeOnController", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp113 = new InternalStructs.executeOnController_args() {
          ClusterId = clusterId,
          Script = script,
          Lang = lang,
        };
        
        await tmp113.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Response> recv_executeOnController(CancellationToken cancellationToken = default)
      {
        
        var tmp114 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp114.Type == TMessageType.Exception)
        {
          var tmp115 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp115;
        }

        var tmp116 = new InternalStructs.executeOnController_result();
        await tmp116.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp116.__isset.success)
        {
          return tmp116.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeOnController failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["ping"] = ping_ProcessAsync;
        processMap_["clean"] = clean_ProcessAsync;
        processMap_["exit"] = exit_ProcessAsync;
        processMap_["createCluster"] = createCluster_ProcessAsync;
        processMap_["createClusterKeepClusterName"] = createClusterKeepClusterName_ProcessAsync;
        processMap_["startMember"] = startMember_ProcessAsync;
        processMap_["shutdownMember"] = shutdownMember_ProcessAsync;
        processMap_["terminateMember"] = terminateMember_ProcessAsync;
        processMap_["suspendMember"] = suspendMember_ProcessAsync;
        processMap_["resumeMember"] = resumeMember_ProcessAsync;
        processMap_["shutdownCluster"] = shutdownCluster_ProcessAsync;
        processMap_["terminateCluster"] = terminateCluster_ProcessAsync;
        processMap_["splitMemberFromCluster"] = splitMemberFromCluster_ProcessAsync;
        processMap_["mergeMemberToCluster"] = mergeMemberToCluster_ProcessAsync;
        processMap_["loginToHazelcastCloud"] = loginToHazelcastCloud_ProcessAsync;
        processMap_["createHazelcastCloudStandardCluster"] = createHazelcastCloudStandardCluster_ProcessAsync;
        processMap_["createHazelcastCloudEnterpriseCluster"] = createHazelcastCloudEnterpriseCluster_ProcessAsync;
        processMap_["scaleUpDownHazelcastCloudStandardCluster"] = scaleUpDownHazelcastCloudStandardCluster_ProcessAsync;
        processMap_["getHazelcastCloudCluster"] = getHazelcastCloudCluster_ProcessAsync;
        processMap_["stopHazelcastCloudCluster"] = stopHazelcastCloudCluster_ProcessAsync;
        processMap_["resumeHazelcastCloudCluster"] = resumeHazelcastCloudCluster_ProcessAsync;
        processMap_["deleteHazelcastCloudCluster"] = deleteHazelcastCloudCluster_ProcessAsync;
        processMap_["executeOnController"] = executeOnController_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task ping_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp117 = new InternalStructs.ping_args();
        await tmp117.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp118 = new InternalStructs.ping_result();
        try
        {
          tmp118.Success = await _iAsync.ping(cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("ping", TMessageType.Reply, seqid), cancellationToken); 
          await tmp118.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp119)
        {
          var tmp120 = $"Error occurred in {GetType().FullName}: {tmp119.Message}";
          if(_logger != null)
            _logger.LogError(tmp119, tmp120);
          else
            Console.Error.WriteLine(tmp120);
          var tmp121 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("ping", TMessageType.Exception, seqid), cancellationToken);
          await tmp121.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task clean_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp122 = new InternalStructs.clean_args();
        await tmp122.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp123 = new InternalStructs.clean_result();
        try
        {
          tmp123.Success = await _iAsync.clean(cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("clean", TMessageType.Reply, seqid), cancellationToken); 
          await tmp123.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp124)
        {
          var tmp125 = $"Error occurred in {GetType().FullName}: {tmp124.Message}";
          if(_logger != null)
            _logger.LogError(tmp124, tmp125);
          else
            Console.Error.WriteLine(tmp125);
          var tmp126 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("clean", TMessageType.Exception, seqid), cancellationToken);
          await tmp126.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task exit_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp127 = new InternalStructs.exit_args();
        await tmp127.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp128 = new InternalStructs.exit_result();
        try
        {
          tmp128.Success = await _iAsync.exit(cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("exit", TMessageType.Reply, seqid), cancellationToken); 
          await tmp128.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp129)
        {
          var tmp130 = $"Error occurred in {GetType().FullName}: {tmp129.Message}";
          if(_logger != null)
            _logger.LogError(tmp129, tmp130);
          else
            Console.Error.WriteLine(tmp130);
          var tmp131 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("exit", TMessageType.Exception, seqid), cancellationToken);
          await tmp131.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp132 = new InternalStructs.createCluster_args();
        await tmp132.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp133 = new InternalStructs.createCluster_result();
        try
        {
          try
          {
            tmp133.Success = await _iAsync.createCluster(tmp132.HzVersion, tmp132.Xmlconfig, cancellationToken);
          }
          catch (global::Hazelcast.Testing.Remote.ServerException tmp134)
          {
            tmp133.ServerException = tmp134;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("createCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp133.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp135)
        {
          var tmp136 = $"Error occurred in {GetType().FullName}: {tmp135.Message}";
          if(_logger != null)
            _logger.LogError(tmp135, tmp136);
          else
            Console.Error.WriteLine(tmp136);
          var tmp137 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp137.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createClusterKeepClusterName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp138 = new InternalStructs.createClusterKeepClusterName_args();
        await tmp138.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp139 = new InternalStructs.createClusterKeepClusterName_result();
        try
        {
          try
          {
            tmp139.Success = await _iAsync.createClusterKeepClusterName(tmp138.HzVersion, tmp138.Xmlconfig, cancellationToken);
          }
          catch (global::Hazelcast.Testing.Remote.ServerException tmp140)
          {
            tmp139.ServerException = tmp140;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("createClusterKeepClusterName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp139.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp141)
        {
          var tmp142 = $"Error occurred in {GetType().FullName}: {tmp141.Message}";
          if(_logger != null)
            _logger.LogError(tmp141, tmp142);
          else
            Console.Error.WriteLine(tmp142);
          var tmp143 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createClusterKeepClusterName", TMessageType.Exception, seqid), cancellationToken);
          await tmp143.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task startMember_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp144 = new InternalStructs.startMember_args();
        await tmp144.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp145 = new InternalStructs.startMember_result();
        try
        {
          try
          {
            tmp145.Success = await _iAsync.startMember(tmp144.ClusterId, cancellationToken);
          }
          catch (global::Hazelcast.Testing.Remote.ServerException tmp146)
          {
            tmp145.ServerException = tmp146;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("startMember", TMessageType.Reply, seqid), cancellationToken); 
          await tmp145.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp147)
        {
          var tmp148 = $"Error occurred in {GetType().FullName}: {tmp147.Message}";
          if(_logger != null)
            _logger.LogError(tmp147, tmp148);
          else
            Console.Error.WriteLine(tmp148);
          var tmp149 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("startMember", TMessageType.Exception, seqid), cancellationToken);
          await tmp149.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task shutdownMember_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp150 = new InternalStructs.shutdownMember_args();
        await tmp150.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp151 = new InternalStructs.shutdownMember_result();
        try
        {
          tmp151.Success = await _iAsync.shutdownMember(tmp150.ClusterId, tmp150.MemberId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("shutdownMember", TMessageType.Reply, seqid), cancellationToken); 
          await tmp151.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp152)
        {
          var tmp153 = $"Error occurred in {GetType().FullName}: {tmp152.Message}";
          if(_logger != null)
            _logger.LogError(tmp152, tmp153);
          else
            Console.Error.WriteLine(tmp153);
          var tmp154 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("shutdownMember", TMessageType.Exception, seqid), cancellationToken);
          await tmp154.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task terminateMember_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp155 = new InternalStructs.terminateMember_args();
        await tmp155.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp156 = new InternalStructs.terminateMember_result();
        try
        {
          tmp156.Success = await _iAsync.terminateMember(tmp155.ClusterId, tmp155.MemberId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("terminateMember", TMessageType.Reply, seqid), cancellationToken); 
          await tmp156.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp157)
        {
          var tmp158 = $"Error occurred in {GetType().FullName}: {tmp157.Message}";
          if(_logger != null)
            _logger.LogError(tmp157, tmp158);
          else
            Console.Error.WriteLine(tmp158);
          var tmp159 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("terminateMember", TMessageType.Exception, seqid), cancellationToken);
          await tmp159.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task suspendMember_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp160 = new InternalStructs.suspendMember_args();
        await tmp160.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp161 = new InternalStructs.suspendMember_result();
        try
        {
          tmp161.Success = await _iAsync.suspendMember(tmp160.ClusterId, tmp160.MemberId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("suspendMember", TMessageType.Reply, seqid), cancellationToken); 
          await tmp161.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp162)
        {
          var tmp163 = $"Error occurred in {GetType().FullName}: {tmp162.Message}";
          if(_logger != null)
            _logger.LogError(tmp162, tmp163);
          else
            Console.Error.WriteLine(tmp163);
          var tmp164 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("suspendMember", TMessageType.Exception, seqid), cancellationToken);
          await tmp164.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task resumeMember_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp165 = new InternalStructs.resumeMember_args();
        await tmp165.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp166 = new InternalStructs.resumeMember_result();
        try
        {
          tmp166.Success = await _iAsync.resumeMember(tmp165.ClusterId, tmp165.MemberId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("resumeMember", TMessageType.Reply, seqid), cancellationToken); 
          await tmp166.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp167)
        {
          var tmp168 = $"Error occurred in {GetType().FullName}: {tmp167.Message}";
          if(_logger != null)
            _logger.LogError(tmp167, tmp168);
          else
            Console.Error.WriteLine(tmp168);
          var tmp169 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("resumeMember", TMessageType.Exception, seqid), cancellationToken);
          await tmp169.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task shutdownCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp170 = new InternalStructs.shutdownCluster_args();
        await tmp170.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp171 = new InternalStructs.shutdownCluster_result();
        try
        {
          tmp171.Success = await _iAsync.shutdownCluster(tmp170.ClusterId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("shutdownCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp171.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp172)
        {
          var tmp173 = $"Error occurred in {GetType().FullName}: {tmp172.Message}";
          if(_logger != null)
            _logger.LogError(tmp172, tmp173);
          else
            Console.Error.WriteLine(tmp173);
          var tmp174 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("shutdownCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp174.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task terminateCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp175 = new InternalStructs.terminateCluster_args();
        await tmp175.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp176 = new InternalStructs.terminateCluster_result();
        try
        {
          tmp176.Success = await _iAsync.terminateCluster(tmp175.ClusterId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("terminateCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp176.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp177)
        {
          var tmp178 = $"Error occurred in {GetType().FullName}: {tmp177.Message}";
          if(_logger != null)
            _logger.LogError(tmp177, tmp178);
          else
            Console.Error.WriteLine(tmp178);
          var tmp179 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("terminateCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp179.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task splitMemberFromCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp180 = new InternalStructs.splitMemberFromCluster_args();
        await tmp180.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp181 = new InternalStructs.splitMemberFromCluster_result();
        try
        {
          tmp181.Success = await _iAsync.splitMemberFromCluster(tmp180.MemberId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("splitMemberFromCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp181.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp182)
        {
          var tmp183 = $"Error occurred in {GetType().FullName}: {tmp182.Message}";
          if(_logger != null)
            _logger.LogError(tmp182, tmp183);
          else
            Console.Error.WriteLine(tmp183);
          var tmp184 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("splitMemberFromCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp184.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task mergeMemberToCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp185 = new InternalStructs.mergeMemberToCluster_args();
        await tmp185.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp186 = new InternalStructs.mergeMemberToCluster_result();
        try
        {
          tmp186.Success = await _iAsync.mergeMemberToCluster(tmp185.ClusterId, tmp185.MemberId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("mergeMemberToCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp186.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp187)
        {
          var tmp188 = $"Error occurred in {GetType().FullName}: {tmp187.Message}";
          if(_logger != null)
            _logger.LogError(tmp187, tmp188);
          else
            Console.Error.WriteLine(tmp188);
          var tmp189 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("mergeMemberToCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp189.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task loginToHazelcastCloud_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp190 = new InternalStructs.loginToHazelcastCloud_args();
        await tmp190.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp191 = new InternalStructs.loginToHazelcastCloud_result();
        try
        {
          await _iAsync.loginToHazelcastCloud(tmp190.Uri, tmp190.ApiKey, tmp190.ApiSecret, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("loginToHazelcastCloud", TMessageType.Reply, seqid), cancellationToken); 
          await tmp191.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp192)
        {
          var tmp193 = $"Error occurred in {GetType().FullName}: {tmp192.Message}";
          if(_logger != null)
            _logger.LogError(tmp192, tmp193);
          else
            Console.Error.WriteLine(tmp193);
          var tmp194 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("loginToHazelcastCloud", TMessageType.Exception, seqid), cancellationToken);
          await tmp194.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createHazelcastCloudStandardCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp195 = new InternalStructs.createHazelcastCloudStandardCluster_args();
        await tmp195.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp196 = new InternalStructs.createHazelcastCloudStandardCluster_result();
        try
        {
          tmp196.Success = await _iAsync.createHazelcastCloudStandardCluster(tmp195.HazelcastVersion, tmp195.IsTlsEnabled, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("createHazelcastCloudStandardCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp196.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp197)
        {
          var tmp198 = $"Error occurred in {GetType().FullName}: {tmp197.Message}";
          if(_logger != null)
            _logger.LogError(tmp197, tmp198);
          else
            Console.Error.WriteLine(tmp198);
          var tmp199 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createHazelcastCloudStandardCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp199.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createHazelcastCloudEnterpriseCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp200 = new InternalStructs.createHazelcastCloudEnterpriseCluster_args();
        await tmp200.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp201 = new InternalStructs.createHazelcastCloudEnterpriseCluster_result();
        try
        {
          tmp201.Success = await _iAsync.createHazelcastCloudEnterpriseCluster(tmp200.CloudProvider, tmp200.HazelcastVersion, tmp200.IsTlsEnabled, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("createHazelcastCloudEnterpriseCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp201.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp202)
        {
          var tmp203 = $"Error occurred in {GetType().FullName}: {tmp202.Message}";
          if(_logger != null)
            _logger.LogError(tmp202, tmp203);
          else
            Console.Error.WriteLine(tmp203);
          var tmp204 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createHazelcastCloudEnterpriseCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp204.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task scaleUpDownHazelcastCloudStandardCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp205 = new InternalStructs.scaleUpDownHazelcastCloudStandardCluster_args();
        await tmp205.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp206 = new InternalStructs.scaleUpDownHazelcastCloudStandardCluster_result();
        try
        {
          tmp206.Success = await _iAsync.scaleUpDownHazelcastCloudStandardCluster(tmp205.Id, tmp205.ScaleNumber, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("scaleUpDownHazelcastCloudStandardCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp206.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp207)
        {
          var tmp208 = $"Error occurred in {GetType().FullName}: {tmp207.Message}";
          if(_logger != null)
            _logger.LogError(tmp207, tmp208);
          else
            Console.Error.WriteLine(tmp208);
          var tmp209 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("scaleUpDownHazelcastCloudStandardCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp209.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getHazelcastCloudCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp210 = new InternalStructs.getHazelcastCloudCluster_args();
        await tmp210.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp211 = new InternalStructs.getHazelcastCloudCluster_result();
        try
        {
          tmp211.Success = await _iAsync.getHazelcastCloudCluster(tmp210.Id, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getHazelcastCloudCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp211.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp212)
        {
          var tmp213 = $"Error occurred in {GetType().FullName}: {tmp212.Message}";
          if(_logger != null)
            _logger.LogError(tmp212, tmp213);
          else
            Console.Error.WriteLine(tmp213);
          var tmp214 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getHazelcastCloudCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp214.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task stopHazelcastCloudCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp215 = new InternalStructs.stopHazelcastCloudCluster_args();
        await tmp215.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp216 = new InternalStructs.stopHazelcastCloudCluster_result();
        try
        {
          tmp216.Success = await _iAsync.stopHazelcastCloudCluster(tmp215.Id, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("stopHazelcastCloudCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp216.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp217)
        {
          var tmp218 = $"Error occurred in {GetType().FullName}: {tmp217.Message}";
          if(_logger != null)
            _logger.LogError(tmp217, tmp218);
          else
            Console.Error.WriteLine(tmp218);
          var tmp219 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("stopHazelcastCloudCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp219.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task resumeHazelcastCloudCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp220 = new InternalStructs.resumeHazelcastCloudCluster_args();
        await tmp220.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp221 = new InternalStructs.resumeHazelcastCloudCluster_result();
        try
        {
          tmp221.Success = await _iAsync.resumeHazelcastCloudCluster(tmp220.Id, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("resumeHazelcastCloudCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp221.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp222)
        {
          var tmp223 = $"Error occurred in {GetType().FullName}: {tmp222.Message}";
          if(_logger != null)
            _logger.LogError(tmp222, tmp223);
          else
            Console.Error.WriteLine(tmp223);
          var tmp224 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("resumeHazelcastCloudCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp224.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteHazelcastCloudCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp225 = new InternalStructs.deleteHazelcastCloudCluster_args();
        await tmp225.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp226 = new InternalStructs.deleteHazelcastCloudCluster_result();
        try
        {
          tmp226.Success = await _iAsync.deleteHazelcastCloudCluster(tmp225.Id, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("deleteHazelcastCloudCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp226.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp227)
        {
          var tmp228 = $"Error occurred in {GetType().FullName}: {tmp227.Message}";
          if(_logger != null)
            _logger.LogError(tmp227, tmp228);
          else
            Console.Error.WriteLine(tmp228);
          var tmp229 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deleteHazelcastCloudCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp229.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task executeOnController_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp230 = new InternalStructs.executeOnController_args();
        await tmp230.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp231 = new InternalStructs.executeOnController_result();
        try
        {
          tmp231.Success = await _iAsync.executeOnController(tmp230.ClusterId, tmp230.Script, tmp230.Lang, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("executeOnController", TMessageType.Reply, seqid), cancellationToken); 
          await tmp231.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp232)
        {
          var tmp233 = $"Error occurred in {GetType().FullName}: {tmp232.Message}";
          if(_logger != null)
            _logger.LogError(tmp232, tmp233);
          else
            Console.Error.WriteLine(tmp233);
          var tmp234 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("executeOnController", TMessageType.Exception, seqid), cancellationToken);
          await tmp234.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class ping_args : TBase
      {

        public ping_args()
        {
        }

        public ping_args DeepCopy()
        {
          var tmp235 = new ping_args();
          return tmp235;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp236 = new TStruct("ping_args");
            await oprot.WriteStructBeginAsync(tmp236, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ping_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp237 = new StringBuilder("ping_args(");
          tmp237.Append(')');
          return tmp237.ToString();
        }
      }


      public partial class ping_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public ping_result()
        {
        }

        public ping_result DeepCopy()
        {
          var tmp239 = new ping_result();
          if(__isset.success)
          {
            tmp239.Success = this.Success;
          }
          tmp239.__isset.success = this.__isset.success;
          return tmp239;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp240 = new TStruct("ping_result");
            await oprot.WriteStructBeginAsync(tmp240, cancellationToken);
            var tmp241 = new TField();

            if(this.__isset.success)
            {
              tmp241.Name = "Success";
              tmp241.Type = TType.Bool;
              tmp241.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp241, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ping_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp242 = new StringBuilder("ping_result(");
          int tmp243 = 0;
          if(__isset.success)
          {
            if(0 < tmp243++) { tmp242.Append(", "); }
            tmp242.Append("Success: ");
            Success.ToString(tmp242);
          }
          tmp242.Append(')');
          return tmp242.ToString();
        }
      }


      public partial class clean_args : TBase
      {

        public clean_args()
        {
        }

        public clean_args DeepCopy()
        {
          var tmp244 = new clean_args();
          return tmp244;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp245 = new TStruct("clean_args");
            await oprot.WriteStructBeginAsync(tmp245, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is clean_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp246 = new StringBuilder("clean_args(");
          tmp246.Append(')');
          return tmp246.ToString();
        }
      }


      public partial class clean_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public clean_result()
        {
        }

        public clean_result DeepCopy()
        {
          var tmp248 = new clean_result();
          if(__isset.success)
          {
            tmp248.Success = this.Success;
          }
          tmp248.__isset.success = this.__isset.success;
          return tmp248;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp249 = new TStruct("clean_result");
            await oprot.WriteStructBeginAsync(tmp249, cancellationToken);
            var tmp250 = new TField();

            if(this.__isset.success)
            {
              tmp250.Name = "Success";
              tmp250.Type = TType.Bool;
              tmp250.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp250, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is clean_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp251 = new StringBuilder("clean_result(");
          int tmp252 = 0;
          if(__isset.success)
          {
            if(0 < tmp252++) { tmp251.Append(", "); }
            tmp251.Append("Success: ");
            Success.ToString(tmp251);
          }
          tmp251.Append(')');
          return tmp251.ToString();
        }
      }


      public partial class exit_args : TBase
      {

        public exit_args()
        {
        }

        public exit_args DeepCopy()
        {
          var tmp253 = new exit_args();
          return tmp253;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp254 = new TStruct("exit_args");
            await oprot.WriteStructBeginAsync(tmp254, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exit_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp255 = new StringBuilder("exit_args(");
          tmp255.Append(')');
          return tmp255.ToString();
        }
      }


      public partial class exit_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public exit_result()
        {
        }

        public exit_result DeepCopy()
        {
          var tmp257 = new exit_result();
          if(__isset.success)
          {
            tmp257.Success = this.Success;
          }
          tmp257.__isset.success = this.__isset.success;
          return tmp257;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp258 = new TStruct("exit_result");
            await oprot.WriteStructBeginAsync(tmp258, cancellationToken);
            var tmp259 = new TField();

            if(this.__isset.success)
            {
              tmp259.Name = "Success";
              tmp259.Type = TType.Bool;
              tmp259.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp259, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exit_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp260 = new StringBuilder("exit_result(");
          int tmp261 = 0;
          if(__isset.success)
          {
            if(0 < tmp261++) { tmp260.Append(", "); }
            tmp260.Append("Success: ");
            Success.ToString(tmp260);
          }
          tmp260.Append(')');
          return tmp260.ToString();
        }
      }


      public partial class createCluster_args : TBase
      {
        private string _hzVersion;
        private string _xmlconfig;

        public string HzVersion
        {
          get
          {
            return _hzVersion;
          }
          set
          {
            __isset.hzVersion = true;
            this._hzVersion = value;
          }
        }

        public string Xmlconfig
        {
          get
          {
            return _xmlconfig;
          }
          set
          {
            __isset.xmlconfig = true;
            this._xmlconfig = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool hzVersion;
          public bool xmlconfig;
        }

        public createCluster_args()
        {
        }

        public createCluster_args DeepCopy()
        {
          var tmp262 = new createCluster_args();
          if((HzVersion != null) && __isset.hzVersion)
          {
            tmp262.HzVersion = this.HzVersion;
          }
          tmp262.__isset.hzVersion = this.__isset.hzVersion;
          if((Xmlconfig != null) && __isset.xmlconfig)
          {
            tmp262.Xmlconfig = this.Xmlconfig;
          }
          tmp262.__isset.xmlconfig = this.__isset.xmlconfig;
          return tmp262;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    HzVersion = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Xmlconfig = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp263 = new TStruct("createCluster_args");
            await oprot.WriteStructBeginAsync(tmp263, cancellationToken);
            var tmp264 = new TField();
            if((HzVersion != null) && __isset.hzVersion)
            {
              tmp264.Name = "hzVersion";
              tmp264.Type = TType.String;
              tmp264.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp264, cancellationToken);
              await oprot.WriteStringAsync(HzVersion, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Xmlconfig != null) && __isset.xmlconfig)
            {
              tmp264.Name = "xmlconfig";
              tmp264.Type = TType.String;
              tmp264.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp264, cancellationToken);
              await oprot.WriteStringAsync(Xmlconfig, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.hzVersion == other.__isset.hzVersion) && ((!__isset.hzVersion) || (System.Object.Equals(HzVersion, other.HzVersion))))
            && ((__isset.xmlconfig == other.__isset.xmlconfig) && ((!__isset.xmlconfig) || (System.Object.Equals(Xmlconfig, other.Xmlconfig))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((HzVersion != null) && __isset.hzVersion)
            {
              hashcode = (hashcode * 397) + HzVersion.GetHashCode();
            }
            if((Xmlconfig != null) && __isset.xmlconfig)
            {
              hashcode = (hashcode * 397) + Xmlconfig.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp265 = new StringBuilder("createCluster_args(");
          int tmp266 = 0;
          if((HzVersion != null) && __isset.hzVersion)
          {
            if(0 < tmp266++) { tmp265.Append(", "); }
            tmp265.Append("HzVersion: ");
            HzVersion.ToString(tmp265);
          }
          if((Xmlconfig != null) && __isset.xmlconfig)
          {
            if(0 < tmp266++) { tmp265.Append(", "); }
            tmp265.Append("Xmlconfig: ");
            Xmlconfig.ToString(tmp265);
          }
          tmp265.Append(')');
          return tmp265.ToString();
        }
      }


      public partial class createCluster_result : TBase
      {
        private global::Hazelcast.Testing.Remote.Cluster _success;
        private global::Hazelcast.Testing.Remote.ServerException _serverException;

        public global::Hazelcast.Testing.Remote.Cluster Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Hazelcast.Testing.Remote.ServerException ServerException
        {
          get
          {
            return _serverException;
          }
          set
          {
            __isset.serverException = true;
            this._serverException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool serverException;
        }

        public createCluster_result()
        {
        }

        public createCluster_result DeepCopy()
        {
          var tmp267 = new createCluster_result();
          if((Success != null) && __isset.success)
          {
            tmp267.Success = (global::Hazelcast.Testing.Remote.Cluster)this.Success.DeepCopy();
          }
          tmp267.__isset.success = this.__isset.success;
          if((ServerException != null) && __isset.serverException)
          {
            tmp267.ServerException = (global::Hazelcast.Testing.Remote.ServerException)this.ServerException.DeepCopy();
          }
          tmp267.__isset.serverException = this.__isset.serverException;
          return tmp267;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.Cluster();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    ServerException = new global::Hazelcast.Testing.Remote.ServerException();
                    await ServerException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp268 = new TStruct("createCluster_result");
            await oprot.WriteStructBeginAsync(tmp268, cancellationToken);
            var tmp269 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp269.Name = "Success";
                tmp269.Type = TType.Struct;
                tmp269.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp269, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.serverException)
            {
              if (ServerException != null)
              {
                tmp269.Name = "ServerException";
                tmp269.Type = TType.Struct;
                tmp269.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp269, cancellationToken);
                await ServerException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
            && ((__isset.serverException == other.__isset.serverException) && ((!__isset.serverException) || (System.Object.Equals(ServerException, other.ServerException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((ServerException != null) && __isset.serverException)
            {
              hashcode = (hashcode * 397) + ServerException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp270 = new StringBuilder("createCluster_result(");
          int tmp271 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp271++) { tmp270.Append(", "); }
            tmp270.Append("Success: ");
            Success.ToString(tmp270);
          }
          if((ServerException != null) && __isset.serverException)
          {
            if(0 < tmp271++) { tmp270.Append(", "); }
            tmp270.Append("ServerException: ");
            ServerException.ToString(tmp270);
          }
          tmp270.Append(')');
          return tmp270.ToString();
        }
      }


      public partial class createClusterKeepClusterName_args : TBase
      {
        private string _hzVersion;
        private string _xmlconfig;

        public string HzVersion
        {
          get
          {
            return _hzVersion;
          }
          set
          {
            __isset.hzVersion = true;
            this._hzVersion = value;
          }
        }

        public string Xmlconfig
        {
          get
          {
            return _xmlconfig;
          }
          set
          {
            __isset.xmlconfig = true;
            this._xmlconfig = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool hzVersion;
          public bool xmlconfig;
        }

        public createClusterKeepClusterName_args()
        {
        }

        public createClusterKeepClusterName_args DeepCopy()
        {
          var tmp272 = new createClusterKeepClusterName_args();
          if((HzVersion != null) && __isset.hzVersion)
          {
            tmp272.HzVersion = this.HzVersion;
          }
          tmp272.__isset.hzVersion = this.__isset.hzVersion;
          if((Xmlconfig != null) && __isset.xmlconfig)
          {
            tmp272.Xmlconfig = this.Xmlconfig;
          }
          tmp272.__isset.xmlconfig = this.__isset.xmlconfig;
          return tmp272;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    HzVersion = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Xmlconfig = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp273 = new TStruct("createClusterKeepClusterName_args");
            await oprot.WriteStructBeginAsync(tmp273, cancellationToken);
            var tmp274 = new TField();
            if((HzVersion != null) && __isset.hzVersion)
            {
              tmp274.Name = "hzVersion";
              tmp274.Type = TType.String;
              tmp274.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp274, cancellationToken);
              await oprot.WriteStringAsync(HzVersion, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Xmlconfig != null) && __isset.xmlconfig)
            {
              tmp274.Name = "xmlconfig";
              tmp274.Type = TType.String;
              tmp274.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp274, cancellationToken);
              await oprot.WriteStringAsync(Xmlconfig, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createClusterKeepClusterName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.hzVersion == other.__isset.hzVersion) && ((!__isset.hzVersion) || (System.Object.Equals(HzVersion, other.HzVersion))))
            && ((__isset.xmlconfig == other.__isset.xmlconfig) && ((!__isset.xmlconfig) || (System.Object.Equals(Xmlconfig, other.Xmlconfig))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((HzVersion != null) && __isset.hzVersion)
            {
              hashcode = (hashcode * 397) + HzVersion.GetHashCode();
            }
            if((Xmlconfig != null) && __isset.xmlconfig)
            {
              hashcode = (hashcode * 397) + Xmlconfig.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp275 = new StringBuilder("createClusterKeepClusterName_args(");
          int tmp276 = 0;
          if((HzVersion != null) && __isset.hzVersion)
          {
            if(0 < tmp276++) { tmp275.Append(", "); }
            tmp275.Append("HzVersion: ");
            HzVersion.ToString(tmp275);
          }
          if((Xmlconfig != null) && __isset.xmlconfig)
          {
            if(0 < tmp276++) { tmp275.Append(", "); }
            tmp275.Append("Xmlconfig: ");
            Xmlconfig.ToString(tmp275);
          }
          tmp275.Append(')');
          return tmp275.ToString();
        }
      }


      public partial class createClusterKeepClusterName_result : TBase
      {
        private global::Hazelcast.Testing.Remote.Cluster _success;
        private global::Hazelcast.Testing.Remote.ServerException _serverException;

        public global::Hazelcast.Testing.Remote.Cluster Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Hazelcast.Testing.Remote.ServerException ServerException
        {
          get
          {
            return _serverException;
          }
          set
          {
            __isset.serverException = true;
            this._serverException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool serverException;
        }

        public createClusterKeepClusterName_result()
        {
        }

        public createClusterKeepClusterName_result DeepCopy()
        {
          var tmp277 = new createClusterKeepClusterName_result();
          if((Success != null) && __isset.success)
          {
            tmp277.Success = (global::Hazelcast.Testing.Remote.Cluster)this.Success.DeepCopy();
          }
          tmp277.__isset.success = this.__isset.success;
          if((ServerException != null) && __isset.serverException)
          {
            tmp277.ServerException = (global::Hazelcast.Testing.Remote.ServerException)this.ServerException.DeepCopy();
          }
          tmp277.__isset.serverException = this.__isset.serverException;
          return tmp277;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.Cluster();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    ServerException = new global::Hazelcast.Testing.Remote.ServerException();
                    await ServerException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp278 = new TStruct("createClusterKeepClusterName_result");
            await oprot.WriteStructBeginAsync(tmp278, cancellationToken);
            var tmp279 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp279.Name = "Success";
                tmp279.Type = TType.Struct;
                tmp279.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp279, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.serverException)
            {
              if (ServerException != null)
              {
                tmp279.Name = "ServerException";
                tmp279.Type = TType.Struct;
                tmp279.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp279, cancellationToken);
                await ServerException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createClusterKeepClusterName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
            && ((__isset.serverException == other.__isset.serverException) && ((!__isset.serverException) || (System.Object.Equals(ServerException, other.ServerException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((ServerException != null) && __isset.serverException)
            {
              hashcode = (hashcode * 397) + ServerException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp280 = new StringBuilder("createClusterKeepClusterName_result(");
          int tmp281 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp281++) { tmp280.Append(", "); }
            tmp280.Append("Success: ");
            Success.ToString(tmp280);
          }
          if((ServerException != null) && __isset.serverException)
          {
            if(0 < tmp281++) { tmp280.Append(", "); }
            tmp280.Append("ServerException: ");
            ServerException.ToString(tmp280);
          }
          tmp280.Append(')');
          return tmp280.ToString();
        }
      }


      public partial class startMember_args : TBase
      {
        private string _clusterId;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
        }

        public startMember_args()
        {
        }

        public startMember_args DeepCopy()
        {
          var tmp282 = new startMember_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp282.ClusterId = this.ClusterId;
          }
          tmp282.__isset.clusterId = this.__isset.clusterId;
          return tmp282;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp283 = new TStruct("startMember_args");
            await oprot.WriteStructBeginAsync(tmp283, cancellationToken);
            var tmp284 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp284.Name = "clusterId";
              tmp284.Type = TType.String;
              tmp284.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp284, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is startMember_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (System.Object.Equals(ClusterId, other.ClusterId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp285 = new StringBuilder("startMember_args(");
          int tmp286 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp286++) { tmp285.Append(", "); }
            tmp285.Append("ClusterId: ");
            ClusterId.ToString(tmp285);
          }
          tmp285.Append(')');
          return tmp285.ToString();
        }
      }


      public partial class startMember_result : TBase
      {
        private global::Hazelcast.Testing.Remote.Member _success;
        private global::Hazelcast.Testing.Remote.ServerException _serverException;

        public global::Hazelcast.Testing.Remote.Member Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Hazelcast.Testing.Remote.ServerException ServerException
        {
          get
          {
            return _serverException;
          }
          set
          {
            __isset.serverException = true;
            this._serverException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool serverException;
        }

        public startMember_result()
        {
        }

        public startMember_result DeepCopy()
        {
          var tmp287 = new startMember_result();
          if((Success != null) && __isset.success)
          {
            tmp287.Success = (global::Hazelcast.Testing.Remote.Member)this.Success.DeepCopy();
          }
          tmp287.__isset.success = this.__isset.success;
          if((ServerException != null) && __isset.serverException)
          {
            tmp287.ServerException = (global::Hazelcast.Testing.Remote.ServerException)this.ServerException.DeepCopy();
          }
          tmp287.__isset.serverException = this.__isset.serverException;
          return tmp287;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.Member();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    ServerException = new global::Hazelcast.Testing.Remote.ServerException();
                    await ServerException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp288 = new TStruct("startMember_result");
            await oprot.WriteStructBeginAsync(tmp288, cancellationToken);
            var tmp289 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp289.Name = "Success";
                tmp289.Type = TType.Struct;
                tmp289.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp289, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.serverException)
            {
              if (ServerException != null)
              {
                tmp289.Name = "ServerException";
                tmp289.Type = TType.Struct;
                tmp289.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp289, cancellationToken);
                await ServerException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is startMember_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
            && ((__isset.serverException == other.__isset.serverException) && ((!__isset.serverException) || (System.Object.Equals(ServerException, other.ServerException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((ServerException != null) && __isset.serverException)
            {
              hashcode = (hashcode * 397) + ServerException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp290 = new StringBuilder("startMember_result(");
          int tmp291 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp291++) { tmp290.Append(", "); }
            tmp290.Append("Success: ");
            Success.ToString(tmp290);
          }
          if((ServerException != null) && __isset.serverException)
          {
            if(0 < tmp291++) { tmp290.Append(", "); }
            tmp290.Append("ServerException: ");
            ServerException.ToString(tmp290);
          }
          tmp290.Append(')');
          return tmp290.ToString();
        }
      }


      public partial class shutdownMember_args : TBase
      {
        private string _clusterId;
        private string _memberId;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }

        public string MemberId
        {
          get
          {
            return _memberId;
          }
          set
          {
            __isset.memberId = true;
            this._memberId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
          public bool memberId;
        }

        public shutdownMember_args()
        {
        }

        public shutdownMember_args DeepCopy()
        {
          var tmp292 = new shutdownMember_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp292.ClusterId = this.ClusterId;
          }
          tmp292.__isset.clusterId = this.__isset.clusterId;
          if((MemberId != null) && __isset.memberId)
          {
            tmp292.MemberId = this.MemberId;
          }
          tmp292.__isset.memberId = this.__isset.memberId;
          return tmp292;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    MemberId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp293 = new TStruct("shutdownMember_args");
            await oprot.WriteStructBeginAsync(tmp293, cancellationToken);
            var tmp294 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp294.Name = "clusterId";
              tmp294.Type = TType.String;
              tmp294.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp294, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MemberId != null) && __isset.memberId)
            {
              tmp294.Name = "memberId";
              tmp294.Type = TType.String;
              tmp294.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp294, cancellationToken);
              await oprot.WriteStringAsync(MemberId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is shutdownMember_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (System.Object.Equals(ClusterId, other.ClusterId))))
            && ((__isset.memberId == other.__isset.memberId) && ((!__isset.memberId) || (System.Object.Equals(MemberId, other.MemberId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
            if((MemberId != null) && __isset.memberId)
            {
              hashcode = (hashcode * 397) + MemberId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp295 = new StringBuilder("shutdownMember_args(");
          int tmp296 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp296++) { tmp295.Append(", "); }
            tmp295.Append("ClusterId: ");
            ClusterId.ToString(tmp295);
          }
          if((MemberId != null) && __isset.memberId)
          {
            if(0 < tmp296++) { tmp295.Append(", "); }
            tmp295.Append("MemberId: ");
            MemberId.ToString(tmp295);
          }
          tmp295.Append(')');
          return tmp295.ToString();
        }
      }


      public partial class shutdownMember_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public shutdownMember_result()
        {
        }

        public shutdownMember_result DeepCopy()
        {
          var tmp297 = new shutdownMember_result();
          if(__isset.success)
          {
            tmp297.Success = this.Success;
          }
          tmp297.__isset.success = this.__isset.success;
          return tmp297;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp298 = new TStruct("shutdownMember_result");
            await oprot.WriteStructBeginAsync(tmp298, cancellationToken);
            var tmp299 = new TField();

            if(this.__isset.success)
            {
              tmp299.Name = "Success";
              tmp299.Type = TType.Bool;
              tmp299.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp299, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is shutdownMember_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp300 = new StringBuilder("shutdownMember_result(");
          int tmp301 = 0;
          if(__isset.success)
          {
            if(0 < tmp301++) { tmp300.Append(", "); }
            tmp300.Append("Success: ");
            Success.ToString(tmp300);
          }
          tmp300.Append(')');
          return tmp300.ToString();
        }
      }


      public partial class terminateMember_args : TBase
      {
        private string _clusterId;
        private string _memberId;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }

        public string MemberId
        {
          get
          {
            return _memberId;
          }
          set
          {
            __isset.memberId = true;
            this._memberId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
          public bool memberId;
        }

        public terminateMember_args()
        {
        }

        public terminateMember_args DeepCopy()
        {
          var tmp302 = new terminateMember_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp302.ClusterId = this.ClusterId;
          }
          tmp302.__isset.clusterId = this.__isset.clusterId;
          if((MemberId != null) && __isset.memberId)
          {
            tmp302.MemberId = this.MemberId;
          }
          tmp302.__isset.memberId = this.__isset.memberId;
          return tmp302;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    MemberId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp303 = new TStruct("terminateMember_args");
            await oprot.WriteStructBeginAsync(tmp303, cancellationToken);
            var tmp304 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp304.Name = "clusterId";
              tmp304.Type = TType.String;
              tmp304.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp304, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MemberId != null) && __isset.memberId)
            {
              tmp304.Name = "memberId";
              tmp304.Type = TType.String;
              tmp304.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp304, cancellationToken);
              await oprot.WriteStringAsync(MemberId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is terminateMember_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (System.Object.Equals(ClusterId, other.ClusterId))))
            && ((__isset.memberId == other.__isset.memberId) && ((!__isset.memberId) || (System.Object.Equals(MemberId, other.MemberId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
            if((MemberId != null) && __isset.memberId)
            {
              hashcode = (hashcode * 397) + MemberId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp305 = new StringBuilder("terminateMember_args(");
          int tmp306 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp306++) { tmp305.Append(", "); }
            tmp305.Append("ClusterId: ");
            ClusterId.ToString(tmp305);
          }
          if((MemberId != null) && __isset.memberId)
          {
            if(0 < tmp306++) { tmp305.Append(", "); }
            tmp305.Append("MemberId: ");
            MemberId.ToString(tmp305);
          }
          tmp305.Append(')');
          return tmp305.ToString();
        }
      }


      public partial class terminateMember_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public terminateMember_result()
        {
        }

        public terminateMember_result DeepCopy()
        {
          var tmp307 = new terminateMember_result();
          if(__isset.success)
          {
            tmp307.Success = this.Success;
          }
          tmp307.__isset.success = this.__isset.success;
          return tmp307;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp308 = new TStruct("terminateMember_result");
            await oprot.WriteStructBeginAsync(tmp308, cancellationToken);
            var tmp309 = new TField();

            if(this.__isset.success)
            {
              tmp309.Name = "Success";
              tmp309.Type = TType.Bool;
              tmp309.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp309, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is terminateMember_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp310 = new StringBuilder("terminateMember_result(");
          int tmp311 = 0;
          if(__isset.success)
          {
            if(0 < tmp311++) { tmp310.Append(", "); }
            tmp310.Append("Success: ");
            Success.ToString(tmp310);
          }
          tmp310.Append(')');
          return tmp310.ToString();
        }
      }


      public partial class suspendMember_args : TBase
      {
        private string _clusterId;
        private string _memberId;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }

        public string MemberId
        {
          get
          {
            return _memberId;
          }
          set
          {
            __isset.memberId = true;
            this._memberId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
          public bool memberId;
        }

        public suspendMember_args()
        {
        }

        public suspendMember_args DeepCopy()
        {
          var tmp312 = new suspendMember_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp312.ClusterId = this.ClusterId;
          }
          tmp312.__isset.clusterId = this.__isset.clusterId;
          if((MemberId != null) && __isset.memberId)
          {
            tmp312.MemberId = this.MemberId;
          }
          tmp312.__isset.memberId = this.__isset.memberId;
          return tmp312;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    MemberId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp313 = new TStruct("suspendMember_args");
            await oprot.WriteStructBeginAsync(tmp313, cancellationToken);
            var tmp314 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp314.Name = "clusterId";
              tmp314.Type = TType.String;
              tmp314.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp314, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MemberId != null) && __isset.memberId)
            {
              tmp314.Name = "memberId";
              tmp314.Type = TType.String;
              tmp314.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp314, cancellationToken);
              await oprot.WriteStringAsync(MemberId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is suspendMember_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (System.Object.Equals(ClusterId, other.ClusterId))))
            && ((__isset.memberId == other.__isset.memberId) && ((!__isset.memberId) || (System.Object.Equals(MemberId, other.MemberId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
            if((MemberId != null) && __isset.memberId)
            {
              hashcode = (hashcode * 397) + MemberId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp315 = new StringBuilder("suspendMember_args(");
          int tmp316 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp316++) { tmp315.Append(", "); }
            tmp315.Append("ClusterId: ");
            ClusterId.ToString(tmp315);
          }
          if((MemberId != null) && __isset.memberId)
          {
            if(0 < tmp316++) { tmp315.Append(", "); }
            tmp315.Append("MemberId: ");
            MemberId.ToString(tmp315);
          }
          tmp315.Append(')');
          return tmp315.ToString();
        }
      }


      public partial class suspendMember_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public suspendMember_result()
        {
        }

        public suspendMember_result DeepCopy()
        {
          var tmp317 = new suspendMember_result();
          if(__isset.success)
          {
            tmp317.Success = this.Success;
          }
          tmp317.__isset.success = this.__isset.success;
          return tmp317;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp318 = new TStruct("suspendMember_result");
            await oprot.WriteStructBeginAsync(tmp318, cancellationToken);
            var tmp319 = new TField();

            if(this.__isset.success)
            {
              tmp319.Name = "Success";
              tmp319.Type = TType.Bool;
              tmp319.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp319, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is suspendMember_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp320 = new StringBuilder("suspendMember_result(");
          int tmp321 = 0;
          if(__isset.success)
          {
            if(0 < tmp321++) { tmp320.Append(", "); }
            tmp320.Append("Success: ");
            Success.ToString(tmp320);
          }
          tmp320.Append(')');
          return tmp320.ToString();
        }
      }


      public partial class resumeMember_args : TBase
      {
        private string _clusterId;
        private string _memberId;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }

        public string MemberId
        {
          get
          {
            return _memberId;
          }
          set
          {
            __isset.memberId = true;
            this._memberId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
          public bool memberId;
        }

        public resumeMember_args()
        {
        }

        public resumeMember_args DeepCopy()
        {
          var tmp322 = new resumeMember_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp322.ClusterId = this.ClusterId;
          }
          tmp322.__isset.clusterId = this.__isset.clusterId;
          if((MemberId != null) && __isset.memberId)
          {
            tmp322.MemberId = this.MemberId;
          }
          tmp322.__isset.memberId = this.__isset.memberId;
          return tmp322;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    MemberId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp323 = new TStruct("resumeMember_args");
            await oprot.WriteStructBeginAsync(tmp323, cancellationToken);
            var tmp324 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp324.Name = "clusterId";
              tmp324.Type = TType.String;
              tmp324.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp324, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MemberId != null) && __isset.memberId)
            {
              tmp324.Name = "memberId";
              tmp324.Type = TType.String;
              tmp324.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp324, cancellationToken);
              await oprot.WriteStringAsync(MemberId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is resumeMember_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (System.Object.Equals(ClusterId, other.ClusterId))))
            && ((__isset.memberId == other.__isset.memberId) && ((!__isset.memberId) || (System.Object.Equals(MemberId, other.MemberId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
            if((MemberId != null) && __isset.memberId)
            {
              hashcode = (hashcode * 397) + MemberId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp325 = new StringBuilder("resumeMember_args(");
          int tmp326 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp326++) { tmp325.Append(", "); }
            tmp325.Append("ClusterId: ");
            ClusterId.ToString(tmp325);
          }
          if((MemberId != null) && __isset.memberId)
          {
            if(0 < tmp326++) { tmp325.Append(", "); }
            tmp325.Append("MemberId: ");
            MemberId.ToString(tmp325);
          }
          tmp325.Append(')');
          return tmp325.ToString();
        }
      }


      public partial class resumeMember_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public resumeMember_result()
        {
        }

        public resumeMember_result DeepCopy()
        {
          var tmp327 = new resumeMember_result();
          if(__isset.success)
          {
            tmp327.Success = this.Success;
          }
          tmp327.__isset.success = this.__isset.success;
          return tmp327;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp328 = new TStruct("resumeMember_result");
            await oprot.WriteStructBeginAsync(tmp328, cancellationToken);
            var tmp329 = new TField();

            if(this.__isset.success)
            {
              tmp329.Name = "Success";
              tmp329.Type = TType.Bool;
              tmp329.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp329, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is resumeMember_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp330 = new StringBuilder("resumeMember_result(");
          int tmp331 = 0;
          if(__isset.success)
          {
            if(0 < tmp331++) { tmp330.Append(", "); }
            tmp330.Append("Success: ");
            Success.ToString(tmp330);
          }
          tmp330.Append(')');
          return tmp330.ToString();
        }
      }


      public partial class shutdownCluster_args : TBase
      {
        private string _clusterId;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
        }

        public shutdownCluster_args()
        {
        }

        public shutdownCluster_args DeepCopy()
        {
          var tmp332 = new shutdownCluster_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp332.ClusterId = this.ClusterId;
          }
          tmp332.__isset.clusterId = this.__isset.clusterId;
          return tmp332;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp333 = new TStruct("shutdownCluster_args");
            await oprot.WriteStructBeginAsync(tmp333, cancellationToken);
            var tmp334 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp334.Name = "clusterId";
              tmp334.Type = TType.String;
              tmp334.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp334, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is shutdownCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (System.Object.Equals(ClusterId, other.ClusterId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp335 = new StringBuilder("shutdownCluster_args(");
          int tmp336 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp336++) { tmp335.Append(", "); }
            tmp335.Append("ClusterId: ");
            ClusterId.ToString(tmp335);
          }
          tmp335.Append(')');
          return tmp335.ToString();
        }
      }


      public partial class shutdownCluster_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public shutdownCluster_result()
        {
        }

        public shutdownCluster_result DeepCopy()
        {
          var tmp337 = new shutdownCluster_result();
          if(__isset.success)
          {
            tmp337.Success = this.Success;
          }
          tmp337.__isset.success = this.__isset.success;
          return tmp337;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp338 = new TStruct("shutdownCluster_result");
            await oprot.WriteStructBeginAsync(tmp338, cancellationToken);
            var tmp339 = new TField();

            if(this.__isset.success)
            {
              tmp339.Name = "Success";
              tmp339.Type = TType.Bool;
              tmp339.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp339, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is shutdownCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp340 = new StringBuilder("shutdownCluster_result(");
          int tmp341 = 0;
          if(__isset.success)
          {
            if(0 < tmp341++) { tmp340.Append(", "); }
            tmp340.Append("Success: ");
            Success.ToString(tmp340);
          }
          tmp340.Append(')');
          return tmp340.ToString();
        }
      }


      public partial class terminateCluster_args : TBase
      {
        private string _clusterId;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
        }

        public terminateCluster_args()
        {
        }

        public terminateCluster_args DeepCopy()
        {
          var tmp342 = new terminateCluster_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp342.ClusterId = this.ClusterId;
          }
          tmp342.__isset.clusterId = this.__isset.clusterId;
          return tmp342;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp343 = new TStruct("terminateCluster_args");
            await oprot.WriteStructBeginAsync(tmp343, cancellationToken);
            var tmp344 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp344.Name = "clusterId";
              tmp344.Type = TType.String;
              tmp344.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp344, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is terminateCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (System.Object.Equals(ClusterId, other.ClusterId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp345 = new StringBuilder("terminateCluster_args(");
          int tmp346 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp346++) { tmp345.Append(", "); }
            tmp345.Append("ClusterId: ");
            ClusterId.ToString(tmp345);
          }
          tmp345.Append(')');
          return tmp345.ToString();
        }
      }


      public partial class terminateCluster_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public terminateCluster_result()
        {
        }

        public terminateCluster_result DeepCopy()
        {
          var tmp347 = new terminateCluster_result();
          if(__isset.success)
          {
            tmp347.Success = this.Success;
          }
          tmp347.__isset.success = this.__isset.success;
          return tmp347;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp348 = new TStruct("terminateCluster_result");
            await oprot.WriteStructBeginAsync(tmp348, cancellationToken);
            var tmp349 = new TField();

            if(this.__isset.success)
            {
              tmp349.Name = "Success";
              tmp349.Type = TType.Bool;
              tmp349.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp349, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is terminateCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp350 = new StringBuilder("terminateCluster_result(");
          int tmp351 = 0;
          if(__isset.success)
          {
            if(0 < tmp351++) { tmp350.Append(", "); }
            tmp350.Append("Success: ");
            Success.ToString(tmp350);
          }
          tmp350.Append(')');
          return tmp350.ToString();
        }
      }


      public partial class splitMemberFromCluster_args : TBase
      {
        private string _memberId;

        public string MemberId
        {
          get
          {
            return _memberId;
          }
          set
          {
            __isset.memberId = true;
            this._memberId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool memberId;
        }

        public splitMemberFromCluster_args()
        {
        }

        public splitMemberFromCluster_args DeepCopy()
        {
          var tmp352 = new splitMemberFromCluster_args();
          if((MemberId != null) && __isset.memberId)
          {
            tmp352.MemberId = this.MemberId;
          }
          tmp352.__isset.memberId = this.__isset.memberId;
          return tmp352;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    MemberId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp353 = new TStruct("splitMemberFromCluster_args");
            await oprot.WriteStructBeginAsync(tmp353, cancellationToken);
            var tmp354 = new TField();
            if((MemberId != null) && __isset.memberId)
            {
              tmp354.Name = "memberId";
              tmp354.Type = TType.String;
              tmp354.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp354, cancellationToken);
              await oprot.WriteStringAsync(MemberId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is splitMemberFromCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.memberId == other.__isset.memberId) && ((!__isset.memberId) || (System.Object.Equals(MemberId, other.MemberId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((MemberId != null) && __isset.memberId)
            {
              hashcode = (hashcode * 397) + MemberId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp355 = new StringBuilder("splitMemberFromCluster_args(");
          int tmp356 = 0;
          if((MemberId != null) && __isset.memberId)
          {
            if(0 < tmp356++) { tmp355.Append(", "); }
            tmp355.Append("MemberId: ");
            MemberId.ToString(tmp355);
          }
          tmp355.Append(')');
          return tmp355.ToString();
        }
      }


      public partial class splitMemberFromCluster_result : TBase
      {
        private global::Hazelcast.Testing.Remote.Cluster _success;

        public global::Hazelcast.Testing.Remote.Cluster Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public splitMemberFromCluster_result()
        {
        }

        public splitMemberFromCluster_result DeepCopy()
        {
          var tmp357 = new splitMemberFromCluster_result();
          if((Success != null) && __isset.success)
          {
            tmp357.Success = (global::Hazelcast.Testing.Remote.Cluster)this.Success.DeepCopy();
          }
          tmp357.__isset.success = this.__isset.success;
          return tmp357;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.Cluster();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp358 = new TStruct("splitMemberFromCluster_result");
            await oprot.WriteStructBeginAsync(tmp358, cancellationToken);
            var tmp359 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp359.Name = "Success";
                tmp359.Type = TType.Struct;
                tmp359.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp359, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is splitMemberFromCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp360 = new StringBuilder("splitMemberFromCluster_result(");
          int tmp361 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp361++) { tmp360.Append(", "); }
            tmp360.Append("Success: ");
            Success.ToString(tmp360);
          }
          tmp360.Append(')');
          return tmp360.ToString();
        }
      }


      public partial class mergeMemberToCluster_args : TBase
      {
        private string _clusterId;
        private string _memberId;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }

        public string MemberId
        {
          get
          {
            return _memberId;
          }
          set
          {
            __isset.memberId = true;
            this._memberId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
          public bool memberId;
        }

        public mergeMemberToCluster_args()
        {
        }

        public mergeMemberToCluster_args DeepCopy()
        {
          var tmp362 = new mergeMemberToCluster_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp362.ClusterId = this.ClusterId;
          }
          tmp362.__isset.clusterId = this.__isset.clusterId;
          if((MemberId != null) && __isset.memberId)
          {
            tmp362.MemberId = this.MemberId;
          }
          tmp362.__isset.memberId = this.__isset.memberId;
          return tmp362;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    MemberId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp363 = new TStruct("mergeMemberToCluster_args");
            await oprot.WriteStructBeginAsync(tmp363, cancellationToken);
            var tmp364 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp364.Name = "clusterId";
              tmp364.Type = TType.String;
              tmp364.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp364, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MemberId != null) && __isset.memberId)
            {
              tmp364.Name = "memberId";
              tmp364.Type = TType.String;
              tmp364.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp364, cancellationToken);
              await oprot.WriteStringAsync(MemberId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is mergeMemberToCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (System.Object.Equals(ClusterId, other.ClusterId))))
            && ((__isset.memberId == other.__isset.memberId) && ((!__isset.memberId) || (System.Object.Equals(MemberId, other.MemberId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
            if((MemberId != null) && __isset.memberId)
            {
              hashcode = (hashcode * 397) + MemberId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp365 = new StringBuilder("mergeMemberToCluster_args(");
          int tmp366 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp366++) { tmp365.Append(", "); }
            tmp365.Append("ClusterId: ");
            ClusterId.ToString(tmp365);
          }
          if((MemberId != null) && __isset.memberId)
          {
            if(0 < tmp366++) { tmp365.Append(", "); }
            tmp365.Append("MemberId: ");
            MemberId.ToString(tmp365);
          }
          tmp365.Append(')');
          return tmp365.ToString();
        }
      }


      public partial class mergeMemberToCluster_result : TBase
      {
        private global::Hazelcast.Testing.Remote.Cluster _success;

        public global::Hazelcast.Testing.Remote.Cluster Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public mergeMemberToCluster_result()
        {
        }

        public mergeMemberToCluster_result DeepCopy()
        {
          var tmp367 = new mergeMemberToCluster_result();
          if((Success != null) && __isset.success)
          {
            tmp367.Success = (global::Hazelcast.Testing.Remote.Cluster)this.Success.DeepCopy();
          }
          tmp367.__isset.success = this.__isset.success;
          return tmp367;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.Cluster();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp368 = new TStruct("mergeMemberToCluster_result");
            await oprot.WriteStructBeginAsync(tmp368, cancellationToken);
            var tmp369 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp369.Name = "Success";
                tmp369.Type = TType.Struct;
                tmp369.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp369, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is mergeMemberToCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp370 = new StringBuilder("mergeMemberToCluster_result(");
          int tmp371 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp371++) { tmp370.Append(", "); }
            tmp370.Append("Success: ");
            Success.ToString(tmp370);
          }
          tmp370.Append(')');
          return tmp370.ToString();
        }
      }


      public partial class loginToHazelcastCloud_args : TBase
      {
        private string _uri;
        private string _apiKey;
        private string _apiSecret;

        public string Uri
        {
          get
          {
            return _uri;
          }
          set
          {
            __isset.uri = true;
            this._uri = value;
          }
        }

        public string ApiKey
        {
          get
          {
            return _apiKey;
          }
          set
          {
            __isset.apiKey = true;
            this._apiKey = value;
          }
        }

        public string ApiSecret
        {
          get
          {
            return _apiSecret;
          }
          set
          {
            __isset.apiSecret = true;
            this._apiSecret = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool uri;
          public bool apiKey;
          public bool apiSecret;
        }

        public loginToHazelcastCloud_args()
        {
        }

        public loginToHazelcastCloud_args DeepCopy()
        {
          var tmp372 = new loginToHazelcastCloud_args();
          if((Uri != null) && __isset.uri)
          {
            tmp372.Uri = this.Uri;
          }
          tmp372.__isset.uri = this.__isset.uri;
          if((ApiKey != null) && __isset.apiKey)
          {
            tmp372.ApiKey = this.ApiKey;
          }
          tmp372.__isset.apiKey = this.__isset.apiKey;
          if((ApiSecret != null) && __isset.apiSecret)
          {
            tmp372.ApiSecret = this.ApiSecret;
          }
          tmp372.__isset.apiSecret = this.__isset.apiSecret;
          return tmp372;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Uri = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ApiKey = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ApiSecret = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp373 = new TStruct("loginToHazelcastCloud_args");
            await oprot.WriteStructBeginAsync(tmp373, cancellationToken);
            var tmp374 = new TField();
            if((Uri != null) && __isset.uri)
            {
              tmp374.Name = "uri";
              tmp374.Type = TType.String;
              tmp374.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp374, cancellationToken);
              await oprot.WriteStringAsync(Uri, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ApiKey != null) && __isset.apiKey)
            {
              tmp374.Name = "apiKey";
              tmp374.Type = TType.String;
              tmp374.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp374, cancellationToken);
              await oprot.WriteStringAsync(ApiKey, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ApiSecret != null) && __isset.apiSecret)
            {
              tmp374.Name = "apiSecret";
              tmp374.Type = TType.String;
              tmp374.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp374, cancellationToken);
              await oprot.WriteStringAsync(ApiSecret, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is loginToHazelcastCloud_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.uri == other.__isset.uri) && ((!__isset.uri) || (System.Object.Equals(Uri, other.Uri))))
            && ((__isset.apiKey == other.__isset.apiKey) && ((!__isset.apiKey) || (System.Object.Equals(ApiKey, other.ApiKey))))
            && ((__isset.apiSecret == other.__isset.apiSecret) && ((!__isset.apiSecret) || (System.Object.Equals(ApiSecret, other.ApiSecret))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Uri != null) && __isset.uri)
            {
              hashcode = (hashcode * 397) + Uri.GetHashCode();
            }
            if((ApiKey != null) && __isset.apiKey)
            {
              hashcode = (hashcode * 397) + ApiKey.GetHashCode();
            }
            if((ApiSecret != null) && __isset.apiSecret)
            {
              hashcode = (hashcode * 397) + ApiSecret.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp375 = new StringBuilder("loginToHazelcastCloud_args(");
          int tmp376 = 0;
          if((Uri != null) && __isset.uri)
          {
            if(0 < tmp376++) { tmp375.Append(", "); }
            tmp375.Append("Uri: ");
            Uri.ToString(tmp375);
          }
          if((ApiKey != null) && __isset.apiKey)
          {
            if(0 < tmp376++) { tmp375.Append(", "); }
            tmp375.Append("ApiKey: ");
            ApiKey.ToString(tmp375);
          }
          if((ApiSecret != null) && __isset.apiSecret)
          {
            if(0 < tmp376++) { tmp375.Append(", "); }
            tmp375.Append("ApiSecret: ");
            ApiSecret.ToString(tmp375);
          }
          tmp375.Append(')');
          return tmp375.ToString();
        }
      }


      public partial class loginToHazelcastCloud_result : TBase
      {

        public loginToHazelcastCloud_result()
        {
        }

        public loginToHazelcastCloud_result DeepCopy()
        {
          var tmp377 = new loginToHazelcastCloud_result();
          return tmp377;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp378 = new TStruct("loginToHazelcastCloud_result");
            await oprot.WriteStructBeginAsync(tmp378, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is loginToHazelcastCloud_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp379 = new StringBuilder("loginToHazelcastCloud_result(");
          tmp379.Append(')');
          return tmp379.ToString();
        }
      }


      public partial class createHazelcastCloudStandardCluster_args : TBase
      {
        private string _hazelcastVersion;
        private bool _isTlsEnabled;

        public string HazelcastVersion
        {
          get
          {
            return _hazelcastVersion;
          }
          set
          {
            __isset.hazelcastVersion = true;
            this._hazelcastVersion = value;
          }
        }

        public bool IsTlsEnabled
        {
          get
          {
            return _isTlsEnabled;
          }
          set
          {
            __isset.isTlsEnabled = true;
            this._isTlsEnabled = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool hazelcastVersion;
          public bool isTlsEnabled;
        }

        public createHazelcastCloudStandardCluster_args()
        {
        }

        public createHazelcastCloudStandardCluster_args DeepCopy()
        {
          var tmp381 = new createHazelcastCloudStandardCluster_args();
          if((HazelcastVersion != null) && __isset.hazelcastVersion)
          {
            tmp381.HazelcastVersion = this.HazelcastVersion;
          }
          tmp381.__isset.hazelcastVersion = this.__isset.hazelcastVersion;
          if(__isset.isTlsEnabled)
          {
            tmp381.IsTlsEnabled = this.IsTlsEnabled;
          }
          tmp381.__isset.isTlsEnabled = this.__isset.isTlsEnabled;
          return tmp381;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    HazelcastVersion = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Bool)
                  {
                    IsTlsEnabled = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp382 = new TStruct("createHazelcastCloudStandardCluster_args");
            await oprot.WriteStructBeginAsync(tmp382, cancellationToken);
            var tmp383 = new TField();
            if((HazelcastVersion != null) && __isset.hazelcastVersion)
            {
              tmp383.Name = "hazelcastVersion";
              tmp383.Type = TType.String;
              tmp383.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp383, cancellationToken);
              await oprot.WriteStringAsync(HazelcastVersion, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.isTlsEnabled)
            {
              tmp383.Name = "isTlsEnabled";
              tmp383.Type = TType.Bool;
              tmp383.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp383, cancellationToken);
              await oprot.WriteBoolAsync(IsTlsEnabled, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createHazelcastCloudStandardCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.hazelcastVersion == other.__isset.hazelcastVersion) && ((!__isset.hazelcastVersion) || (System.Object.Equals(HazelcastVersion, other.HazelcastVersion))))
            && ((__isset.isTlsEnabled == other.__isset.isTlsEnabled) && ((!__isset.isTlsEnabled) || (System.Object.Equals(IsTlsEnabled, other.IsTlsEnabled))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((HazelcastVersion != null) && __isset.hazelcastVersion)
            {
              hashcode = (hashcode * 397) + HazelcastVersion.GetHashCode();
            }
            if(__isset.isTlsEnabled)
            {
              hashcode = (hashcode * 397) + IsTlsEnabled.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp384 = new StringBuilder("createHazelcastCloudStandardCluster_args(");
          int tmp385 = 0;
          if((HazelcastVersion != null) && __isset.hazelcastVersion)
          {
            if(0 < tmp385++) { tmp384.Append(", "); }
            tmp384.Append("HazelcastVersion: ");
            HazelcastVersion.ToString(tmp384);
          }
          if(__isset.isTlsEnabled)
          {
            if(0 < tmp385++) { tmp384.Append(", "); }
            tmp384.Append("IsTlsEnabled: ");
            IsTlsEnabled.ToString(tmp384);
          }
          tmp384.Append(')');
          return tmp384.ToString();
        }
      }


      public partial class createHazelcastCloudStandardCluster_result : TBase
      {
        private global::Hazelcast.Testing.Remote.CloudCluster _success;

        public global::Hazelcast.Testing.Remote.CloudCluster Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public createHazelcastCloudStandardCluster_result()
        {
        }

        public createHazelcastCloudStandardCluster_result DeepCopy()
        {
          var tmp386 = new createHazelcastCloudStandardCluster_result();
          if((Success != null) && __isset.success)
          {
            tmp386.Success = (global::Hazelcast.Testing.Remote.CloudCluster)this.Success.DeepCopy();
          }
          tmp386.__isset.success = this.__isset.success;
          return tmp386;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.CloudCluster();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp387 = new TStruct("createHazelcastCloudStandardCluster_result");
            await oprot.WriteStructBeginAsync(tmp387, cancellationToken);
            var tmp388 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp388.Name = "Success";
                tmp388.Type = TType.Struct;
                tmp388.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp388, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createHazelcastCloudStandardCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp389 = new StringBuilder("createHazelcastCloudStandardCluster_result(");
          int tmp390 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp390++) { tmp389.Append(", "); }
            tmp389.Append("Success: ");
            Success.ToString(tmp389);
          }
          tmp389.Append(')');
          return tmp389.ToString();
        }
      }


      public partial class createHazelcastCloudEnterpriseCluster_args : TBase
      {
        private string _cloudProvider;
        private string _hazelcastVersion;
        private bool _isTlsEnabled;

        public string CloudProvider
        {
          get
          {
            return _cloudProvider;
          }
          set
          {
            __isset.cloudProvider = true;
            this._cloudProvider = value;
          }
        }

        public string HazelcastVersion
        {
          get
          {
            return _hazelcastVersion;
          }
          set
          {
            __isset.hazelcastVersion = true;
            this._hazelcastVersion = value;
          }
        }

        public bool IsTlsEnabled
        {
          get
          {
            return _isTlsEnabled;
          }
          set
          {
            __isset.isTlsEnabled = true;
            this._isTlsEnabled = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool cloudProvider;
          public bool hazelcastVersion;
          public bool isTlsEnabled;
        }

        public createHazelcastCloudEnterpriseCluster_args()
        {
        }

        public createHazelcastCloudEnterpriseCluster_args DeepCopy()
        {
          var tmp391 = new createHazelcastCloudEnterpriseCluster_args();
          if((CloudProvider != null) && __isset.cloudProvider)
          {
            tmp391.CloudProvider = this.CloudProvider;
          }
          tmp391.__isset.cloudProvider = this.__isset.cloudProvider;
          if((HazelcastVersion != null) && __isset.hazelcastVersion)
          {
            tmp391.HazelcastVersion = this.HazelcastVersion;
          }
          tmp391.__isset.hazelcastVersion = this.__isset.hazelcastVersion;
          if(__isset.isTlsEnabled)
          {
            tmp391.IsTlsEnabled = this.IsTlsEnabled;
          }
          tmp391.__isset.isTlsEnabled = this.__isset.isTlsEnabled;
          return tmp391;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    CloudProvider = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    HazelcastVersion = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    IsTlsEnabled = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp392 = new TStruct("createHazelcastCloudEnterpriseCluster_args");
            await oprot.WriteStructBeginAsync(tmp392, cancellationToken);
            var tmp393 = new TField();
            if((CloudProvider != null) && __isset.cloudProvider)
            {
              tmp393.Name = "cloudProvider";
              tmp393.Type = TType.String;
              tmp393.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp393, cancellationToken);
              await oprot.WriteStringAsync(CloudProvider, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((HazelcastVersion != null) && __isset.hazelcastVersion)
            {
              tmp393.Name = "hazelcastVersion";
              tmp393.Type = TType.String;
              tmp393.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp393, cancellationToken);
              await oprot.WriteStringAsync(HazelcastVersion, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.isTlsEnabled)
            {
              tmp393.Name = "isTlsEnabled";
              tmp393.Type = TType.Bool;
              tmp393.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp393, cancellationToken);
              await oprot.WriteBoolAsync(IsTlsEnabled, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createHazelcastCloudEnterpriseCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.cloudProvider == other.__isset.cloudProvider) && ((!__isset.cloudProvider) || (System.Object.Equals(CloudProvider, other.CloudProvider))))
            && ((__isset.hazelcastVersion == other.__isset.hazelcastVersion) && ((!__isset.hazelcastVersion) || (System.Object.Equals(HazelcastVersion, other.HazelcastVersion))))
            && ((__isset.isTlsEnabled == other.__isset.isTlsEnabled) && ((!__isset.isTlsEnabled) || (System.Object.Equals(IsTlsEnabled, other.IsTlsEnabled))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((CloudProvider != null) && __isset.cloudProvider)
            {
              hashcode = (hashcode * 397) + CloudProvider.GetHashCode();
            }
            if((HazelcastVersion != null) && __isset.hazelcastVersion)
            {
              hashcode = (hashcode * 397) + HazelcastVersion.GetHashCode();
            }
            if(__isset.isTlsEnabled)
            {
              hashcode = (hashcode * 397) + IsTlsEnabled.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp394 = new StringBuilder("createHazelcastCloudEnterpriseCluster_args(");
          int tmp395 = 0;
          if((CloudProvider != null) && __isset.cloudProvider)
          {
            if(0 < tmp395++) { tmp394.Append(", "); }
            tmp394.Append("CloudProvider: ");
            CloudProvider.ToString(tmp394);
          }
          if((HazelcastVersion != null) && __isset.hazelcastVersion)
          {
            if(0 < tmp395++) { tmp394.Append(", "); }
            tmp394.Append("HazelcastVersion: ");
            HazelcastVersion.ToString(tmp394);
          }
          if(__isset.isTlsEnabled)
          {
            if(0 < tmp395++) { tmp394.Append(", "); }
            tmp394.Append("IsTlsEnabled: ");
            IsTlsEnabled.ToString(tmp394);
          }
          tmp394.Append(')');
          return tmp394.ToString();
        }
      }


      public partial class createHazelcastCloudEnterpriseCluster_result : TBase
      {
        private global::Hazelcast.Testing.Remote.CloudCluster _success;

        public global::Hazelcast.Testing.Remote.CloudCluster Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public createHazelcastCloudEnterpriseCluster_result()
        {
        }

        public createHazelcastCloudEnterpriseCluster_result DeepCopy()
        {
          var tmp396 = new createHazelcastCloudEnterpriseCluster_result();
          if((Success != null) && __isset.success)
          {
            tmp396.Success = (global::Hazelcast.Testing.Remote.CloudCluster)this.Success.DeepCopy();
          }
          tmp396.__isset.success = this.__isset.success;
          return tmp396;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.CloudCluster();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp397 = new TStruct("createHazelcastCloudEnterpriseCluster_result");
            await oprot.WriteStructBeginAsync(tmp397, cancellationToken);
            var tmp398 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp398.Name = "Success";
                tmp398.Type = TType.Struct;
                tmp398.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp398, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createHazelcastCloudEnterpriseCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp399 = new StringBuilder("createHazelcastCloudEnterpriseCluster_result(");
          int tmp400 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp400++) { tmp399.Append(", "); }
            tmp399.Append("Success: ");
            Success.ToString(tmp399);
          }
          tmp399.Append(')');
          return tmp399.ToString();
        }
      }


      public partial class scaleUpDownHazelcastCloudStandardCluster_args : TBase
      {
        private string _id;
        private int _scaleNumber;

        public string Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }

        public int ScaleNumber
        {
          get
          {
            return _scaleNumber;
          }
          set
          {
            __isset.scaleNumber = true;
            this._scaleNumber = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
          public bool scaleNumber;
        }

        public scaleUpDownHazelcastCloudStandardCluster_args()
        {
        }

        public scaleUpDownHazelcastCloudStandardCluster_args DeepCopy()
        {
          var tmp401 = new scaleUpDownHazelcastCloudStandardCluster_args();
          if((Id != null) && __isset.id)
          {
            tmp401.Id = this.Id;
          }
          tmp401.__isset.id = this.__isset.id;
          if(__isset.scaleNumber)
          {
            tmp401.ScaleNumber = this.ScaleNumber;
          }
          tmp401.__isset.scaleNumber = this.__isset.scaleNumber;
          return tmp401;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Id = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ScaleNumber = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp402 = new TStruct("scaleUpDownHazelcastCloudStandardCluster_args");
            await oprot.WriteStructBeginAsync(tmp402, cancellationToken);
            var tmp403 = new TField();
            if((Id != null) && __isset.id)
            {
              tmp403.Name = "id";
              tmp403.Type = TType.String;
              tmp403.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp403, cancellationToken);
              await oprot.WriteStringAsync(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.scaleNumber)
            {
              tmp403.Name = "scaleNumber";
              tmp403.Type = TType.I32;
              tmp403.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp403, cancellationToken);
              await oprot.WriteI32Async(ScaleNumber, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is scaleUpDownHazelcastCloudStandardCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (System.Object.Equals(Id, other.Id))))
            && ((__isset.scaleNumber == other.__isset.scaleNumber) && ((!__isset.scaleNumber) || (System.Object.Equals(ScaleNumber, other.ScaleNumber))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Id != null) && __isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
            if(__isset.scaleNumber)
            {
              hashcode = (hashcode * 397) + ScaleNumber.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp404 = new StringBuilder("scaleUpDownHazelcastCloudStandardCluster_args(");
          int tmp405 = 0;
          if((Id != null) && __isset.id)
          {
            if(0 < tmp405++) { tmp404.Append(", "); }
            tmp404.Append("Id: ");
            Id.ToString(tmp404);
          }
          if(__isset.scaleNumber)
          {
            if(0 < tmp405++) { tmp404.Append(", "); }
            tmp404.Append("ScaleNumber: ");
            ScaleNumber.ToString(tmp404);
          }
          tmp404.Append(')');
          return tmp404.ToString();
        }
      }


      public partial class scaleUpDownHazelcastCloudStandardCluster_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public scaleUpDownHazelcastCloudStandardCluster_result()
        {
        }

        public scaleUpDownHazelcastCloudStandardCluster_result DeepCopy()
        {
          var tmp406 = new scaleUpDownHazelcastCloudStandardCluster_result();
          if(__isset.success)
          {
            tmp406.Success = this.Success;
          }
          tmp406.__isset.success = this.__isset.success;
          return tmp406;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp407 = new TStruct("scaleUpDownHazelcastCloudStandardCluster_result");
            await oprot.WriteStructBeginAsync(tmp407, cancellationToken);
            var tmp408 = new TField();

            if(this.__isset.success)
            {
              tmp408.Name = "Success";
              tmp408.Type = TType.Bool;
              tmp408.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp408, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is scaleUpDownHazelcastCloudStandardCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp409 = new StringBuilder("scaleUpDownHazelcastCloudStandardCluster_result(");
          int tmp410 = 0;
          if(__isset.success)
          {
            if(0 < tmp410++) { tmp409.Append(", "); }
            tmp409.Append("Success: ");
            Success.ToString(tmp409);
          }
          tmp409.Append(')');
          return tmp409.ToString();
        }
      }


      public partial class getHazelcastCloudCluster_args : TBase
      {
        private string _id;

        public string Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public getHazelcastCloudCluster_args()
        {
        }

        public getHazelcastCloudCluster_args DeepCopy()
        {
          var tmp411 = new getHazelcastCloudCluster_args();
          if((Id != null) && __isset.id)
          {
            tmp411.Id = this.Id;
          }
          tmp411.__isset.id = this.__isset.id;
          return tmp411;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Id = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp412 = new TStruct("getHazelcastCloudCluster_args");
            await oprot.WriteStructBeginAsync(tmp412, cancellationToken);
            var tmp413 = new TField();
            if((Id != null) && __isset.id)
            {
              tmp413.Name = "id";
              tmp413.Type = TType.String;
              tmp413.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp413, cancellationToken);
              await oprot.WriteStringAsync(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getHazelcastCloudCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Id != null) && __isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp414 = new StringBuilder("getHazelcastCloudCluster_args(");
          int tmp415 = 0;
          if((Id != null) && __isset.id)
          {
            if(0 < tmp415++) { tmp414.Append(", "); }
            tmp414.Append("Id: ");
            Id.ToString(tmp414);
          }
          tmp414.Append(')');
          return tmp414.ToString();
        }
      }


      public partial class getHazelcastCloudCluster_result : TBase
      {
        private global::Hazelcast.Testing.Remote.CloudCluster _success;

        public global::Hazelcast.Testing.Remote.CloudCluster Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getHazelcastCloudCluster_result()
        {
        }

        public getHazelcastCloudCluster_result DeepCopy()
        {
          var tmp416 = new getHazelcastCloudCluster_result();
          if((Success != null) && __isset.success)
          {
            tmp416.Success = (global::Hazelcast.Testing.Remote.CloudCluster)this.Success.DeepCopy();
          }
          tmp416.__isset.success = this.__isset.success;
          return tmp416;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.CloudCluster();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp417 = new TStruct("getHazelcastCloudCluster_result");
            await oprot.WriteStructBeginAsync(tmp417, cancellationToken);
            var tmp418 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp418.Name = "Success";
                tmp418.Type = TType.Struct;
                tmp418.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp418, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getHazelcastCloudCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp419 = new StringBuilder("getHazelcastCloudCluster_result(");
          int tmp420 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp420++) { tmp419.Append(", "); }
            tmp419.Append("Success: ");
            Success.ToString(tmp419);
          }
          tmp419.Append(')');
          return tmp419.ToString();
        }
      }


      public partial class stopHazelcastCloudCluster_args : TBase
      {
        private string _id;

        public string Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public stopHazelcastCloudCluster_args()
        {
        }

        public stopHazelcastCloudCluster_args DeepCopy()
        {
          var tmp421 = new stopHazelcastCloudCluster_args();
          if((Id != null) && __isset.id)
          {
            tmp421.Id = this.Id;
          }
          tmp421.__isset.id = this.__isset.id;
          return tmp421;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Id = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp422 = new TStruct("stopHazelcastCloudCluster_args");
            await oprot.WriteStructBeginAsync(tmp422, cancellationToken);
            var tmp423 = new TField();
            if((Id != null) && __isset.id)
            {
              tmp423.Name = "id";
              tmp423.Type = TType.String;
              tmp423.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp423, cancellationToken);
              await oprot.WriteStringAsync(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is stopHazelcastCloudCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Id != null) && __isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp424 = new StringBuilder("stopHazelcastCloudCluster_args(");
          int tmp425 = 0;
          if((Id != null) && __isset.id)
          {
            if(0 < tmp425++) { tmp424.Append(", "); }
            tmp424.Append("Id: ");
            Id.ToString(tmp424);
          }
          tmp424.Append(')');
          return tmp424.ToString();
        }
      }


      public partial class stopHazelcastCloudCluster_result : TBase
      {
        private global::Hazelcast.Testing.Remote.CloudCluster _success;

        public global::Hazelcast.Testing.Remote.CloudCluster Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public stopHazelcastCloudCluster_result()
        {
        }

        public stopHazelcastCloudCluster_result DeepCopy()
        {
          var tmp426 = new stopHazelcastCloudCluster_result();
          if((Success != null) && __isset.success)
          {
            tmp426.Success = (global::Hazelcast.Testing.Remote.CloudCluster)this.Success.DeepCopy();
          }
          tmp426.__isset.success = this.__isset.success;
          return tmp426;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.CloudCluster();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp427 = new TStruct("stopHazelcastCloudCluster_result");
            await oprot.WriteStructBeginAsync(tmp427, cancellationToken);
            var tmp428 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp428.Name = "Success";
                tmp428.Type = TType.Struct;
                tmp428.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp428, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is stopHazelcastCloudCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp429 = new StringBuilder("stopHazelcastCloudCluster_result(");
          int tmp430 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp430++) { tmp429.Append(", "); }
            tmp429.Append("Success: ");
            Success.ToString(tmp429);
          }
          tmp429.Append(')');
          return tmp429.ToString();
        }
      }


      public partial class resumeHazelcastCloudCluster_args : TBase
      {
        private string _id;

        public string Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public resumeHazelcastCloudCluster_args()
        {
        }

        public resumeHazelcastCloudCluster_args DeepCopy()
        {
          var tmp431 = new resumeHazelcastCloudCluster_args();
          if((Id != null) && __isset.id)
          {
            tmp431.Id = this.Id;
          }
          tmp431.__isset.id = this.__isset.id;
          return tmp431;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Id = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp432 = new TStruct("resumeHazelcastCloudCluster_args");
            await oprot.WriteStructBeginAsync(tmp432, cancellationToken);
            var tmp433 = new TField();
            if((Id != null) && __isset.id)
            {
              tmp433.Name = "id";
              tmp433.Type = TType.String;
              tmp433.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp433, cancellationToken);
              await oprot.WriteStringAsync(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is resumeHazelcastCloudCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Id != null) && __isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp434 = new StringBuilder("resumeHazelcastCloudCluster_args(");
          int tmp435 = 0;
          if((Id != null) && __isset.id)
          {
            if(0 < tmp435++) { tmp434.Append(", "); }
            tmp434.Append("Id: ");
            Id.ToString(tmp434);
          }
          tmp434.Append(')');
          return tmp434.ToString();
        }
      }


      public partial class resumeHazelcastCloudCluster_result : TBase
      {
        private global::Hazelcast.Testing.Remote.CloudCluster _success;

        public global::Hazelcast.Testing.Remote.CloudCluster Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public resumeHazelcastCloudCluster_result()
        {
        }

        public resumeHazelcastCloudCluster_result DeepCopy()
        {
          var tmp436 = new resumeHazelcastCloudCluster_result();
          if((Success != null) && __isset.success)
          {
            tmp436.Success = (global::Hazelcast.Testing.Remote.CloudCluster)this.Success.DeepCopy();
          }
          tmp436.__isset.success = this.__isset.success;
          return tmp436;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.CloudCluster();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp437 = new TStruct("resumeHazelcastCloudCluster_result");
            await oprot.WriteStructBeginAsync(tmp437, cancellationToken);
            var tmp438 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp438.Name = "Success";
                tmp438.Type = TType.Struct;
                tmp438.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp438, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is resumeHazelcastCloudCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp439 = new StringBuilder("resumeHazelcastCloudCluster_result(");
          int tmp440 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp440++) { tmp439.Append(", "); }
            tmp439.Append("Success: ");
            Success.ToString(tmp439);
          }
          tmp439.Append(')');
          return tmp439.ToString();
        }
      }


      public partial class deleteHazelcastCloudCluster_args : TBase
      {
        private string _id;

        public string Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public deleteHazelcastCloudCluster_args()
        {
        }

        public deleteHazelcastCloudCluster_args DeepCopy()
        {
          var tmp441 = new deleteHazelcastCloudCluster_args();
          if((Id != null) && __isset.id)
          {
            tmp441.Id = this.Id;
          }
          tmp441.__isset.id = this.__isset.id;
          return tmp441;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Id = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp442 = new TStruct("deleteHazelcastCloudCluster_args");
            await oprot.WriteStructBeginAsync(tmp442, cancellationToken);
            var tmp443 = new TField();
            if((Id != null) && __isset.id)
            {
              tmp443.Name = "id";
              tmp443.Type = TType.String;
              tmp443.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp443, cancellationToken);
              await oprot.WriteStringAsync(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteHazelcastCloudCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Id != null) && __isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp444 = new StringBuilder("deleteHazelcastCloudCluster_args(");
          int tmp445 = 0;
          if((Id != null) && __isset.id)
          {
            if(0 < tmp445++) { tmp444.Append(", "); }
            tmp444.Append("Id: ");
            Id.ToString(tmp444);
          }
          tmp444.Append(')');
          return tmp444.ToString();
        }
      }


      public partial class deleteHazelcastCloudCluster_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public deleteHazelcastCloudCluster_result()
        {
        }

        public deleteHazelcastCloudCluster_result DeepCopy()
        {
          var tmp446 = new deleteHazelcastCloudCluster_result();
          if(__isset.success)
          {
            tmp446.Success = this.Success;
          }
          tmp446.__isset.success = this.__isset.success;
          return tmp446;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp447 = new TStruct("deleteHazelcastCloudCluster_result");
            await oprot.WriteStructBeginAsync(tmp447, cancellationToken);
            var tmp448 = new TField();

            if(this.__isset.success)
            {
              tmp448.Name = "Success";
              tmp448.Type = TType.Bool;
              tmp448.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp448, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteHazelcastCloudCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp449 = new StringBuilder("deleteHazelcastCloudCluster_result(");
          int tmp450 = 0;
          if(__isset.success)
          {
            if(0 < tmp450++) { tmp449.Append(", "); }
            tmp449.Append("Success: ");
            Success.ToString(tmp449);
          }
          tmp449.Append(')');
          return tmp449.ToString();
        }
      }


      public partial class executeOnController_args : TBase
      {
        private string _clusterId;
        private string _script;
        private global::Hazelcast.Testing.Remote.Lang _lang;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }

        public string Script
        {
          get
          {
            return _script;
          }
          set
          {
            __isset.script = true;
            this._script = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Hazelcast.Testing.Remote.Lang"/>
        /// </summary>
        public global::Hazelcast.Testing.Remote.Lang Lang
        {
          get
          {
            return _lang;
          }
          set
          {
            __isset.lang = true;
            this._lang = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
          public bool script;
          public bool lang;
        }

        public executeOnController_args()
        {
        }

        public executeOnController_args DeepCopy()
        {
          var tmp451 = new executeOnController_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp451.ClusterId = this.ClusterId;
          }
          tmp451.__isset.clusterId = this.__isset.clusterId;
          if((Script != null) && __isset.script)
          {
            tmp451.Script = this.Script;
          }
          tmp451.__isset.script = this.__isset.script;
          if(__isset.lang)
          {
            tmp451.Lang = this.Lang;
          }
          tmp451.__isset.lang = this.__isset.lang;
          return tmp451;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Script = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Lang = (global::Hazelcast.Testing.Remote.Lang)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp452 = new TStruct("executeOnController_args");
            await oprot.WriteStructBeginAsync(tmp452, cancellationToken);
            var tmp453 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp453.Name = "clusterId";
              tmp453.Type = TType.String;
              tmp453.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp453, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Script != null) && __isset.script)
            {
              tmp453.Name = "script";
              tmp453.Type = TType.String;
              tmp453.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp453, cancellationToken);
              await oprot.WriteStringAsync(Script, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.lang)
            {
              tmp453.Name = "lang";
              tmp453.Type = TType.I32;
              tmp453.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp453, cancellationToken);
              await oprot.WriteI32Async((int)Lang, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is executeOnController_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (System.Object.Equals(ClusterId, other.ClusterId))))
            && ((__isset.script == other.__isset.script) && ((!__isset.script) || (System.Object.Equals(Script, other.Script))))
            && ((__isset.lang == other.__isset.lang) && ((!__isset.lang) || (System.Object.Equals(Lang, other.Lang))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
            if((Script != null) && __isset.script)
            {
              hashcode = (hashcode * 397) + Script.GetHashCode();
            }
            if(__isset.lang)
            {
              hashcode = (hashcode * 397) + Lang.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp454 = new StringBuilder("executeOnController_args(");
          int tmp455 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp455++) { tmp454.Append(", "); }
            tmp454.Append("ClusterId: ");
            ClusterId.ToString(tmp454);
          }
          if((Script != null) && __isset.script)
          {
            if(0 < tmp455++) { tmp454.Append(", "); }
            tmp454.Append("Script: ");
            Script.ToString(tmp454);
          }
          if(__isset.lang)
          {
            if(0 < tmp455++) { tmp454.Append(", "); }
            tmp454.Append("Lang: ");
            Lang.ToString(tmp454);
          }
          tmp454.Append(')');
          return tmp454.ToString();
        }
      }


      public partial class executeOnController_result : TBase
      {
        private global::Hazelcast.Testing.Remote.Response _success;

        public global::Hazelcast.Testing.Remote.Response Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public executeOnController_result()
        {
        }

        public executeOnController_result DeepCopy()
        {
          var tmp456 = new executeOnController_result();
          if((Success != null) && __isset.success)
          {
            tmp456.Success = (global::Hazelcast.Testing.Remote.Response)this.Success.DeepCopy();
          }
          tmp456.__isset.success = this.__isset.success;
          return tmp456;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.Response();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp457 = new TStruct("executeOnController_result");
            await oprot.WriteStructBeginAsync(tmp457, cancellationToken);
            var tmp458 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp458.Name = "Success";
                tmp458.Type = TType.Struct;
                tmp458.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp458, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is executeOnController_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp459 = new StringBuilder("executeOnController_result(");
          int tmp460 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp460++) { tmp459.Append(", "); }
            tmp459.Append("Success: ");
            Success.ToString(tmp459);
          }
          tmp459.Append(')');
          return tmp459.ToString();
        }
      }

    }

  }
}
