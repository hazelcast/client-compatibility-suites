/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Hazelcast.Testing.Remote
{
  public partial class RemoteController
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<bool> ping(CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> clean(CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> exit(CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> createCluster(string hzVersion, string xmlconfig, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> createClusterKeepClusterName(string hzVersion, string xmlconfig, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Member> startMember(string clusterId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> shutdownMember(string clusterId, string memberId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> terminateMember(string clusterId, string memberId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> suspendMember(string clusterId, string memberId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> resumeMember(string clusterId, string memberId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> shutdownCluster(string clusterId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> terminateCluster(string clusterId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> splitMemberFromCluster(string memberId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> mergeMemberToCluster(string clusterId, string memberId, CancellationToken cancellationToken = default);

      /// <summary>
      /// Reads the environment variables and calls loginToHazelcastCloud() method with these variables.
      /// @throws CloudException
      /// </summary>
      global::System.Threading.Tasks.Task loginToHazelcastCloudUsingEnvironment(CancellationToken cancellationToken = default);

      /// <summary>
      /// Logins the hazelcast cloud, sets the bearer token, uri and baseUrl to HazelcastCloudManager then it will be ready to use cloud API
      /// @throws CloudException
      /// 
      /// @param baseUrl -> Base url of the cloud environment. i.e. https://uat.hazelcast.cloud
      /// @param apiKey -> Api key of the hazelcast cloud
      /// @param apiSecret -> Api secret of the hazelcast cloud
      /// </summary>
      /// <param name="baseUrl"></param>
      /// <param name="apiKey"></param>
      /// <param name="apiSecret"></param>
      global::System.Threading.Tasks.Task loginToHazelcastCloud(string baseUrl, string apiKey, string apiSecret, CancellationToken cancellationToken = default);

      /// <summary>
      /// Creates a standard cluster
      /// @return CloudCluster
      /// @throws CloudException
      /// 
      /// @param hazelcastVersion
      /// @param isTlsEnabled -> True if ssl enabled cluster is requested, otherwise false.
      /// </summary>
      /// <param name="hazelcastVersion"></param>
      /// <param name="isTlsEnabled"></param>
      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> createHazelcastCloudStandardCluster(string hazelcastVersion, bool isTlsEnabled, CancellationToken cancellationToken = default);

      /// <summary>
      /// Setting member count of the cluster
      /// @throws CloudException
      /// 
      /// @param cloudClusterId
      /// @param totalMemberCount -> Total member count of the cluster
      /// </summary>
      /// <param name="cloudClusterId"></param>
      /// <param name="totalMemberCount"></param>
      global::System.Threading.Tasks.Task setHazelcastCloudClusterMemberCount(string cloudClusterId, int totalMemberCount, CancellationToken cancellationToken = default);

      /// <summary>
      /// Get information of the given cluster
      /// @return CloudCluster
      /// @throws CloudException
      /// 
      /// @param cloudClusterId
      /// </summary>
      /// <param name="cloudClusterId"></param>
      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> getHazelcastCloudCluster(string cloudClusterId, CancellationToken cancellationToken = default);

      /// <summary>
      /// Stops the given cluster
      /// @return CloudCluster
      /// @throws CloudException
      /// 
      /// @param cloudClusterId
      /// </summary>
      /// <param name="cloudClusterId"></param>
      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> stopHazelcastCloudCluster(string cloudClusterId, CancellationToken cancellationToken = default);

      /// <summary>
      /// Resumes the given cluster
      /// @return CloudCluster
      /// @throws CloudException
      /// 
      /// @param cloudClusterId
      /// </summary>
      /// <param name="cloudClusterId"></param>
      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> resumeHazelcastCloudCluster(string cloudClusterId, CancellationToken cancellationToken = default);

      /// <summary>
      /// Deletes the given cluster
      /// @return boolean
      /// @throws CloudException
      /// 
      /// @param cloudClusterId
      /// </summary>
      /// <param name="cloudClusterId"></param>
      global::System.Threading.Tasks.Task deleteHazelcastCloudCluster(string cloudClusterId, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Response> executeOnController(string clusterId, string script, global::Hazelcast.Testing.Remote.Lang lang, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<bool> ping(CancellationToken cancellationToken = default)
      {
        await send_ping(cancellationToken);
        return await recv_ping(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_ping(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("ping", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp30 = new InternalStructs.ping_args() {
        };
        
        await tmp30.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_ping(CancellationToken cancellationToken = default)
      {
        
        var tmp31 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp31.Type == TMessageType.Exception)
        {
          var tmp32 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp32;
        }

        var tmp33 = new InternalStructs.ping_result();
        await tmp33.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp33.__isset.success)
        {
          return tmp33.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ping failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> clean(CancellationToken cancellationToken = default)
      {
        await send_clean(cancellationToken);
        return await recv_clean(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_clean(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("clean", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp34 = new InternalStructs.clean_args() {
        };
        
        await tmp34.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_clean(CancellationToken cancellationToken = default)
      {
        
        var tmp35 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp35.Type == TMessageType.Exception)
        {
          var tmp36 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp36;
        }

        var tmp37 = new InternalStructs.clean_result();
        await tmp37.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp37.__isset.success)
        {
          return tmp37.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "clean failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> exit(CancellationToken cancellationToken = default)
      {
        await send_exit(cancellationToken);
        return await recv_exit(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_exit(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("exit", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp38 = new InternalStructs.exit_args() {
        };
        
        await tmp38.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_exit(CancellationToken cancellationToken = default)
      {
        
        var tmp39 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp39.Type == TMessageType.Exception)
        {
          var tmp40 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp40;
        }

        var tmp41 = new InternalStructs.exit_result();
        await tmp41.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp41.__isset.success)
        {
          return tmp41.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exit failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> createCluster(string hzVersion, string xmlconfig, CancellationToken cancellationToken = default)
      {
        await send_createCluster(hzVersion, xmlconfig, cancellationToken);
        return await recv_createCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createCluster(string hzVersion, string xmlconfig, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp42 = new InternalStructs.createCluster_args() {
          HzVersion = hzVersion,
          Xmlconfig = xmlconfig,
        };
        
        await tmp42.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> recv_createCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp43 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp43.Type == TMessageType.Exception)
        {
          var tmp44 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp44;
        }

        var tmp45 = new InternalStructs.createCluster_result();
        await tmp45.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp45.__isset.success)
        {
          return tmp45.Success;
        }
        if (tmp45.__isset.serverException)
        {
          throw tmp45.ServerException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> createClusterKeepClusterName(string hzVersion, string xmlconfig, CancellationToken cancellationToken = default)
      {
        await send_createClusterKeepClusterName(hzVersion, xmlconfig, cancellationToken);
        return await recv_createClusterKeepClusterName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createClusterKeepClusterName(string hzVersion, string xmlconfig, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createClusterKeepClusterName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp46 = new InternalStructs.createClusterKeepClusterName_args() {
          HzVersion = hzVersion,
          Xmlconfig = xmlconfig,
        };
        
        await tmp46.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> recv_createClusterKeepClusterName(CancellationToken cancellationToken = default)
      {
        
        var tmp47 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp47.Type == TMessageType.Exception)
        {
          var tmp48 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp48;
        }

        var tmp49 = new InternalStructs.createClusterKeepClusterName_result();
        await tmp49.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp49.__isset.success)
        {
          return tmp49.Success;
        }
        if (tmp49.__isset.serverException)
        {
          throw tmp49.ServerException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createClusterKeepClusterName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Member> startMember(string clusterId, CancellationToken cancellationToken = default)
      {
        await send_startMember(clusterId, cancellationToken);
        return await recv_startMember(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_startMember(string clusterId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("startMember", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp50 = new InternalStructs.startMember_args() {
          ClusterId = clusterId,
        };
        
        await tmp50.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Member> recv_startMember(CancellationToken cancellationToken = default)
      {
        
        var tmp51 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp51.Type == TMessageType.Exception)
        {
          var tmp52 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp52;
        }

        var tmp53 = new InternalStructs.startMember_result();
        await tmp53.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp53.__isset.success)
        {
          return tmp53.Success;
        }
        if (tmp53.__isset.serverException)
        {
          throw tmp53.ServerException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "startMember failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> shutdownMember(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await send_shutdownMember(clusterId, memberId, cancellationToken);
        return await recv_shutdownMember(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_shutdownMember(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("shutdownMember", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp54 = new InternalStructs.shutdownMember_args() {
          ClusterId = clusterId,
          MemberId = memberId,
        };
        
        await tmp54.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_shutdownMember(CancellationToken cancellationToken = default)
      {
        
        var tmp55 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp55.Type == TMessageType.Exception)
        {
          var tmp56 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp56;
        }

        var tmp57 = new InternalStructs.shutdownMember_result();
        await tmp57.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp57.__isset.success)
        {
          return tmp57.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "shutdownMember failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> terminateMember(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await send_terminateMember(clusterId, memberId, cancellationToken);
        return await recv_terminateMember(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_terminateMember(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("terminateMember", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp58 = new InternalStructs.terminateMember_args() {
          ClusterId = clusterId,
          MemberId = memberId,
        };
        
        await tmp58.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_terminateMember(CancellationToken cancellationToken = default)
      {
        
        var tmp59 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp59.Type == TMessageType.Exception)
        {
          var tmp60 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp60;
        }

        var tmp61 = new InternalStructs.terminateMember_result();
        await tmp61.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp61.__isset.success)
        {
          return tmp61.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "terminateMember failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> suspendMember(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await send_suspendMember(clusterId, memberId, cancellationToken);
        return await recv_suspendMember(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_suspendMember(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("suspendMember", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp62 = new InternalStructs.suspendMember_args() {
          ClusterId = clusterId,
          MemberId = memberId,
        };
        
        await tmp62.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_suspendMember(CancellationToken cancellationToken = default)
      {
        
        var tmp63 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp63.Type == TMessageType.Exception)
        {
          var tmp64 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp64;
        }

        var tmp65 = new InternalStructs.suspendMember_result();
        await tmp65.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp65.__isset.success)
        {
          return tmp65.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "suspendMember failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> resumeMember(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await send_resumeMember(clusterId, memberId, cancellationToken);
        return await recv_resumeMember(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_resumeMember(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("resumeMember", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp66 = new InternalStructs.resumeMember_args() {
          ClusterId = clusterId,
          MemberId = memberId,
        };
        
        await tmp66.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_resumeMember(CancellationToken cancellationToken = default)
      {
        
        var tmp67 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp67.Type == TMessageType.Exception)
        {
          var tmp68 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp68;
        }

        var tmp69 = new InternalStructs.resumeMember_result();
        await tmp69.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp69.__isset.success)
        {
          return tmp69.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "resumeMember failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> shutdownCluster(string clusterId, CancellationToken cancellationToken = default)
      {
        await send_shutdownCluster(clusterId, cancellationToken);
        return await recv_shutdownCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_shutdownCluster(string clusterId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("shutdownCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp70 = new InternalStructs.shutdownCluster_args() {
          ClusterId = clusterId,
        };
        
        await tmp70.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_shutdownCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp71 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp71.Type == TMessageType.Exception)
        {
          var tmp72 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp72;
        }

        var tmp73 = new InternalStructs.shutdownCluster_result();
        await tmp73.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp73.__isset.success)
        {
          return tmp73.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "shutdownCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> terminateCluster(string clusterId, CancellationToken cancellationToken = default)
      {
        await send_terminateCluster(clusterId, cancellationToken);
        return await recv_terminateCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_terminateCluster(string clusterId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("terminateCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp74 = new InternalStructs.terminateCluster_args() {
          ClusterId = clusterId,
        };
        
        await tmp74.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_terminateCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp75 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp75.Type == TMessageType.Exception)
        {
          var tmp76 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp76;
        }

        var tmp77 = new InternalStructs.terminateCluster_result();
        await tmp77.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp77.__isset.success)
        {
          return tmp77.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "terminateCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> splitMemberFromCluster(string memberId, CancellationToken cancellationToken = default)
      {
        await send_splitMemberFromCluster(memberId, cancellationToken);
        return await recv_splitMemberFromCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_splitMemberFromCluster(string memberId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("splitMemberFromCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp78 = new InternalStructs.splitMemberFromCluster_args() {
          MemberId = memberId,
        };
        
        await tmp78.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> recv_splitMemberFromCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp79 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp79.Type == TMessageType.Exception)
        {
          var tmp80 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp80;
        }

        var tmp81 = new InternalStructs.splitMemberFromCluster_result();
        await tmp81.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp81.__isset.success)
        {
          return tmp81.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "splitMemberFromCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> mergeMemberToCluster(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await send_mergeMemberToCluster(clusterId, memberId, cancellationToken);
        return await recv_mergeMemberToCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_mergeMemberToCluster(string clusterId, string memberId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("mergeMemberToCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp82 = new InternalStructs.mergeMemberToCluster_args() {
          ClusterId = clusterId,
          MemberId = memberId,
        };
        
        await tmp82.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Cluster> recv_mergeMemberToCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp83 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp83.Type == TMessageType.Exception)
        {
          var tmp84 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp84;
        }

        var tmp85 = new InternalStructs.mergeMemberToCluster_result();
        await tmp85.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp85.__isset.success)
        {
          return tmp85.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "mergeMemberToCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task loginToHazelcastCloudUsingEnvironment(CancellationToken cancellationToken = default)
      {
        await send_loginToHazelcastCloudUsingEnvironment(cancellationToken);
        await recv_loginToHazelcastCloudUsingEnvironment(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_loginToHazelcastCloudUsingEnvironment(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("loginToHazelcastCloudUsingEnvironment", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp86 = new InternalStructs.loginToHazelcastCloudUsingEnvironment_args() {
        };
        
        await tmp86.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_loginToHazelcastCloudUsingEnvironment(CancellationToken cancellationToken = default)
      {
        
        var tmp87 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp87.Type == TMessageType.Exception)
        {
          var tmp88 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp88;
        }

        var tmp89 = new InternalStructs.loginToHazelcastCloudUsingEnvironment_result();
        await tmp89.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp89.__isset.cloudException)
        {
          throw tmp89.CloudException;
        }
      }

      public async global::System.Threading.Tasks.Task loginToHazelcastCloud(string baseUrl, string apiKey, string apiSecret, CancellationToken cancellationToken = default)
      {
        await send_loginToHazelcastCloud(baseUrl, apiKey, apiSecret, cancellationToken);
        await recv_loginToHazelcastCloud(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_loginToHazelcastCloud(string baseUrl, string apiKey, string apiSecret, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("loginToHazelcastCloud", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp90 = new InternalStructs.loginToHazelcastCloud_args() {
          BaseUrl = baseUrl,
          ApiKey = apiKey,
          ApiSecret = apiSecret,
        };
        
        await tmp90.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_loginToHazelcastCloud(CancellationToken cancellationToken = default)
      {
        
        var tmp91 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp91.Type == TMessageType.Exception)
        {
          var tmp92 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp92;
        }

        var tmp93 = new InternalStructs.loginToHazelcastCloud_result();
        await tmp93.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp93.__isset.cloudException)
        {
          throw tmp93.CloudException;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> createHazelcastCloudStandardCluster(string hazelcastVersion, bool isTlsEnabled, CancellationToken cancellationToken = default)
      {
        await send_createHazelcastCloudStandardCluster(hazelcastVersion, isTlsEnabled, cancellationToken);
        return await recv_createHazelcastCloudStandardCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createHazelcastCloudStandardCluster(string hazelcastVersion, bool isTlsEnabled, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createHazelcastCloudStandardCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp94 = new InternalStructs.createHazelcastCloudStandardCluster_args() {
          HazelcastVersion = hazelcastVersion,
          IsTlsEnabled = isTlsEnabled,
        };
        
        await tmp94.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> recv_createHazelcastCloudStandardCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp95 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp95.Type == TMessageType.Exception)
        {
          var tmp96 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp96;
        }

        var tmp97 = new InternalStructs.createHazelcastCloudStandardCluster_result();
        await tmp97.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp97.__isset.success)
        {
          return tmp97.Success;
        }
        if (tmp97.__isset.cloudException)
        {
          throw tmp97.CloudException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createHazelcastCloudStandardCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setHazelcastCloudClusterMemberCount(string cloudClusterId, int totalMemberCount, CancellationToken cancellationToken = default)
      {
        await send_setHazelcastCloudClusterMemberCount(cloudClusterId, totalMemberCount, cancellationToken);
        await recv_setHazelcastCloudClusterMemberCount(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setHazelcastCloudClusterMemberCount(string cloudClusterId, int totalMemberCount, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setHazelcastCloudClusterMemberCount", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp98 = new InternalStructs.setHazelcastCloudClusterMemberCount_args() {
          CloudClusterId = cloudClusterId,
          TotalMemberCount = totalMemberCount,
        };
        
        await tmp98.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setHazelcastCloudClusterMemberCount(CancellationToken cancellationToken = default)
      {
        
        var tmp99 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp99.Type == TMessageType.Exception)
        {
          var tmp100 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp100;
        }

        var tmp101 = new InternalStructs.setHazelcastCloudClusterMemberCount_result();
        await tmp101.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp101.__isset.cloudException)
        {
          throw tmp101.CloudException;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> getHazelcastCloudCluster(string cloudClusterId, CancellationToken cancellationToken = default)
      {
        await send_getHazelcastCloudCluster(cloudClusterId, cancellationToken);
        return await recv_getHazelcastCloudCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getHazelcastCloudCluster(string cloudClusterId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getHazelcastCloudCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp102 = new InternalStructs.getHazelcastCloudCluster_args() {
          CloudClusterId = cloudClusterId,
        };
        
        await tmp102.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> recv_getHazelcastCloudCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp103 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp103.Type == TMessageType.Exception)
        {
          var tmp104 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp104;
        }

        var tmp105 = new InternalStructs.getHazelcastCloudCluster_result();
        await tmp105.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp105.__isset.success)
        {
          return tmp105.Success;
        }
        if (tmp105.__isset.cloudException)
        {
          throw tmp105.CloudException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getHazelcastCloudCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> stopHazelcastCloudCluster(string cloudClusterId, CancellationToken cancellationToken = default)
      {
        await send_stopHazelcastCloudCluster(cloudClusterId, cancellationToken);
        return await recv_stopHazelcastCloudCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_stopHazelcastCloudCluster(string cloudClusterId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("stopHazelcastCloudCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp106 = new InternalStructs.stopHazelcastCloudCluster_args() {
          CloudClusterId = cloudClusterId,
        };
        
        await tmp106.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> recv_stopHazelcastCloudCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp107 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp107.Type == TMessageType.Exception)
        {
          var tmp108 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp108;
        }

        var tmp109 = new InternalStructs.stopHazelcastCloudCluster_result();
        await tmp109.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp109.__isset.success)
        {
          return tmp109.Success;
        }
        if (tmp109.__isset.cloudException)
        {
          throw tmp109.CloudException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "stopHazelcastCloudCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> resumeHazelcastCloudCluster(string cloudClusterId, CancellationToken cancellationToken = default)
      {
        await send_resumeHazelcastCloudCluster(cloudClusterId, cancellationToken);
        return await recv_resumeHazelcastCloudCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_resumeHazelcastCloudCluster(string cloudClusterId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("resumeHazelcastCloudCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp110 = new InternalStructs.resumeHazelcastCloudCluster_args() {
          CloudClusterId = cloudClusterId,
        };
        
        await tmp110.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.CloudCluster> recv_resumeHazelcastCloudCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp111 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp111.Type == TMessageType.Exception)
        {
          var tmp112 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp112;
        }

        var tmp113 = new InternalStructs.resumeHazelcastCloudCluster_result();
        await tmp113.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp113.__isset.success)
        {
          return tmp113.Success;
        }
        if (tmp113.__isset.cloudException)
        {
          throw tmp113.CloudException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "resumeHazelcastCloudCluster failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task deleteHazelcastCloudCluster(string cloudClusterId, CancellationToken cancellationToken = default)
      {
        await send_deleteHazelcastCloudCluster(cloudClusterId, cancellationToken);
        await recv_deleteHazelcastCloudCluster(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deleteHazelcastCloudCluster(string cloudClusterId, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteHazelcastCloudCluster", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp114 = new InternalStructs.deleteHazelcastCloudCluster_args() {
          CloudClusterId = cloudClusterId,
        };
        
        await tmp114.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_deleteHazelcastCloudCluster(CancellationToken cancellationToken = default)
      {
        
        var tmp115 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp115.Type == TMessageType.Exception)
        {
          var tmp116 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp116;
        }

        var tmp117 = new InternalStructs.deleteHazelcastCloudCluster_result();
        await tmp117.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp117.__isset.cloudException)
        {
          throw tmp117.CloudException;
        }
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Response> executeOnController(string clusterId, string script, global::Hazelcast.Testing.Remote.Lang lang, CancellationToken cancellationToken = default)
      {
        await send_executeOnController(clusterId, script, lang, cancellationToken);
        return await recv_executeOnController(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_executeOnController(string clusterId, string script, global::Hazelcast.Testing.Remote.Lang lang, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("executeOnController", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp118 = new InternalStructs.executeOnController_args() {
          ClusterId = clusterId,
          Script = script,
          Lang = lang,
        };
        
        await tmp118.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Hazelcast.Testing.Remote.Response> recv_executeOnController(CancellationToken cancellationToken = default)
      {
        
        var tmp119 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp119.Type == TMessageType.Exception)
        {
          var tmp120 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp120;
        }

        var tmp121 = new InternalStructs.executeOnController_result();
        await tmp121.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp121.__isset.success)
        {
          return tmp121.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeOnController failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["ping"] = ping_ProcessAsync;
        processMap_["clean"] = clean_ProcessAsync;
        processMap_["exit"] = exit_ProcessAsync;
        processMap_["createCluster"] = createCluster_ProcessAsync;
        processMap_["createClusterKeepClusterName"] = createClusterKeepClusterName_ProcessAsync;
        processMap_["startMember"] = startMember_ProcessAsync;
        processMap_["shutdownMember"] = shutdownMember_ProcessAsync;
        processMap_["terminateMember"] = terminateMember_ProcessAsync;
        processMap_["suspendMember"] = suspendMember_ProcessAsync;
        processMap_["resumeMember"] = resumeMember_ProcessAsync;
        processMap_["shutdownCluster"] = shutdownCluster_ProcessAsync;
        processMap_["terminateCluster"] = terminateCluster_ProcessAsync;
        processMap_["splitMemberFromCluster"] = splitMemberFromCluster_ProcessAsync;
        processMap_["mergeMemberToCluster"] = mergeMemberToCluster_ProcessAsync;
        processMap_["loginToHazelcastCloudUsingEnvironment"] = loginToHazelcastCloudUsingEnvironment_ProcessAsync;
        processMap_["loginToHazelcastCloud"] = loginToHazelcastCloud_ProcessAsync;
        processMap_["createHazelcastCloudStandardCluster"] = createHazelcastCloudStandardCluster_ProcessAsync;
        processMap_["setHazelcastCloudClusterMemberCount"] = setHazelcastCloudClusterMemberCount_ProcessAsync;
        processMap_["getHazelcastCloudCluster"] = getHazelcastCloudCluster_ProcessAsync;
        processMap_["stopHazelcastCloudCluster"] = stopHazelcastCloudCluster_ProcessAsync;
        processMap_["resumeHazelcastCloudCluster"] = resumeHazelcastCloudCluster_ProcessAsync;
        processMap_["deleteHazelcastCloudCluster"] = deleteHazelcastCloudCluster_ProcessAsync;
        processMap_["executeOnController"] = executeOnController_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task ping_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp122 = new InternalStructs.ping_args();
        await tmp122.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp123 = new InternalStructs.ping_result();
        try
        {
          tmp123.Success = await _iAsync.ping(cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("ping", TMessageType.Reply, seqid), cancellationToken); 
          await tmp123.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp124)
        {
          var tmp125 = $"Error occurred in {GetType().FullName}: {tmp124.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp124, tmp125);
          else
            Console.Error.WriteLine(tmp125);
          var tmp126 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("ping", TMessageType.Exception, seqid), cancellationToken);
          await tmp126.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task clean_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp127 = new InternalStructs.clean_args();
        await tmp127.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp128 = new InternalStructs.clean_result();
        try
        {
          tmp128.Success = await _iAsync.clean(cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("clean", TMessageType.Reply, seqid), cancellationToken); 
          await tmp128.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp129)
        {
          var tmp130 = $"Error occurred in {GetType().FullName}: {tmp129.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp129, tmp130);
          else
            Console.Error.WriteLine(tmp130);
          var tmp131 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("clean", TMessageType.Exception, seqid), cancellationToken);
          await tmp131.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task exit_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp132 = new InternalStructs.exit_args();
        await tmp132.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp133 = new InternalStructs.exit_result();
        try
        {
          tmp133.Success = await _iAsync.exit(cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("exit", TMessageType.Reply, seqid), cancellationToken); 
          await tmp133.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp134)
        {
          var tmp135 = $"Error occurred in {GetType().FullName}: {tmp134.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp134, tmp135);
          else
            Console.Error.WriteLine(tmp135);
          var tmp136 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("exit", TMessageType.Exception, seqid), cancellationToken);
          await tmp136.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp137 = new InternalStructs.createCluster_args();
        await tmp137.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp138 = new InternalStructs.createCluster_result();
        try
        {
          try
          {
            tmp138.Success = await _iAsync.createCluster(tmp137.HzVersion, tmp137.Xmlconfig, cancellationToken);
          }
          catch (global::Hazelcast.Testing.Remote.ServerException tmp139)
          {
            tmp138.ServerException = tmp139;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("createCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp138.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp140)
        {
          var tmp141 = $"Error occurred in {GetType().FullName}: {tmp140.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp140, tmp141);
          else
            Console.Error.WriteLine(tmp141);
          var tmp142 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp142.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createClusterKeepClusterName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp143 = new InternalStructs.createClusterKeepClusterName_args();
        await tmp143.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp144 = new InternalStructs.createClusterKeepClusterName_result();
        try
        {
          try
          {
            tmp144.Success = await _iAsync.createClusterKeepClusterName(tmp143.HzVersion, tmp143.Xmlconfig, cancellationToken);
          }
          catch (global::Hazelcast.Testing.Remote.ServerException tmp145)
          {
            tmp144.ServerException = tmp145;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("createClusterKeepClusterName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp144.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp146)
        {
          var tmp147 = $"Error occurred in {GetType().FullName}: {tmp146.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp146, tmp147);
          else
            Console.Error.WriteLine(tmp147);
          var tmp148 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createClusterKeepClusterName", TMessageType.Exception, seqid), cancellationToken);
          await tmp148.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task startMember_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp149 = new InternalStructs.startMember_args();
        await tmp149.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp150 = new InternalStructs.startMember_result();
        try
        {
          try
          {
            tmp150.Success = await _iAsync.startMember(tmp149.ClusterId, cancellationToken);
          }
          catch (global::Hazelcast.Testing.Remote.ServerException tmp151)
          {
            tmp150.ServerException = tmp151;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("startMember", TMessageType.Reply, seqid), cancellationToken); 
          await tmp150.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp152)
        {
          var tmp153 = $"Error occurred in {GetType().FullName}: {tmp152.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp152, tmp153);
          else
            Console.Error.WriteLine(tmp153);
          var tmp154 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("startMember", TMessageType.Exception, seqid), cancellationToken);
          await tmp154.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task shutdownMember_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp155 = new InternalStructs.shutdownMember_args();
        await tmp155.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp156 = new InternalStructs.shutdownMember_result();
        try
        {
          tmp156.Success = await _iAsync.shutdownMember(tmp155.ClusterId, tmp155.MemberId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("shutdownMember", TMessageType.Reply, seqid), cancellationToken); 
          await tmp156.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp157)
        {
          var tmp158 = $"Error occurred in {GetType().FullName}: {tmp157.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp157, tmp158);
          else
            Console.Error.WriteLine(tmp158);
          var tmp159 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("shutdownMember", TMessageType.Exception, seqid), cancellationToken);
          await tmp159.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task terminateMember_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp160 = new InternalStructs.terminateMember_args();
        await tmp160.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp161 = new InternalStructs.terminateMember_result();
        try
        {
          tmp161.Success = await _iAsync.terminateMember(tmp160.ClusterId, tmp160.MemberId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("terminateMember", TMessageType.Reply, seqid), cancellationToken); 
          await tmp161.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp162)
        {
          var tmp163 = $"Error occurred in {GetType().FullName}: {tmp162.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp162, tmp163);
          else
            Console.Error.WriteLine(tmp163);
          var tmp164 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("terminateMember", TMessageType.Exception, seqid), cancellationToken);
          await tmp164.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task suspendMember_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp165 = new InternalStructs.suspendMember_args();
        await tmp165.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp166 = new InternalStructs.suspendMember_result();
        try
        {
          tmp166.Success = await _iAsync.suspendMember(tmp165.ClusterId, tmp165.MemberId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("suspendMember", TMessageType.Reply, seqid), cancellationToken); 
          await tmp166.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp167)
        {
          var tmp168 = $"Error occurred in {GetType().FullName}: {tmp167.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp167, tmp168);
          else
            Console.Error.WriteLine(tmp168);
          var tmp169 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("suspendMember", TMessageType.Exception, seqid), cancellationToken);
          await tmp169.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task resumeMember_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp170 = new InternalStructs.resumeMember_args();
        await tmp170.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp171 = new InternalStructs.resumeMember_result();
        try
        {
          tmp171.Success = await _iAsync.resumeMember(tmp170.ClusterId, tmp170.MemberId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("resumeMember", TMessageType.Reply, seqid), cancellationToken); 
          await tmp171.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp172)
        {
          var tmp173 = $"Error occurred in {GetType().FullName}: {tmp172.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp172, tmp173);
          else
            Console.Error.WriteLine(tmp173);
          var tmp174 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("resumeMember", TMessageType.Exception, seqid), cancellationToken);
          await tmp174.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task shutdownCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp175 = new InternalStructs.shutdownCluster_args();
        await tmp175.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp176 = new InternalStructs.shutdownCluster_result();
        try
        {
          tmp176.Success = await _iAsync.shutdownCluster(tmp175.ClusterId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("shutdownCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp176.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp177)
        {
          var tmp178 = $"Error occurred in {GetType().FullName}: {tmp177.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp177, tmp178);
          else
            Console.Error.WriteLine(tmp178);
          var tmp179 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("shutdownCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp179.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task terminateCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp180 = new InternalStructs.terminateCluster_args();
        await tmp180.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp181 = new InternalStructs.terminateCluster_result();
        try
        {
          tmp181.Success = await _iAsync.terminateCluster(tmp180.ClusterId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("terminateCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp181.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp182)
        {
          var tmp183 = $"Error occurred in {GetType().FullName}: {tmp182.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp182, tmp183);
          else
            Console.Error.WriteLine(tmp183);
          var tmp184 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("terminateCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp184.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task splitMemberFromCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp185 = new InternalStructs.splitMemberFromCluster_args();
        await tmp185.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp186 = new InternalStructs.splitMemberFromCluster_result();
        try
        {
          tmp186.Success = await _iAsync.splitMemberFromCluster(tmp185.MemberId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("splitMemberFromCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp186.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp187)
        {
          var tmp188 = $"Error occurred in {GetType().FullName}: {tmp187.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp187, tmp188);
          else
            Console.Error.WriteLine(tmp188);
          var tmp189 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("splitMemberFromCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp189.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task mergeMemberToCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp190 = new InternalStructs.mergeMemberToCluster_args();
        await tmp190.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp191 = new InternalStructs.mergeMemberToCluster_result();
        try
        {
          tmp191.Success = await _iAsync.mergeMemberToCluster(tmp190.ClusterId, tmp190.MemberId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("mergeMemberToCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp191.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp192)
        {
          var tmp193 = $"Error occurred in {GetType().FullName}: {tmp192.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp192, tmp193);
          else
            Console.Error.WriteLine(tmp193);
          var tmp194 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("mergeMemberToCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp194.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task loginToHazelcastCloudUsingEnvironment_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp195 = new InternalStructs.loginToHazelcastCloudUsingEnvironment_args();
        await tmp195.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp196 = new InternalStructs.loginToHazelcastCloudUsingEnvironment_result();
        try
        {
          try
          {
            await _iAsync.loginToHazelcastCloudUsingEnvironment(cancellationToken);
          }
          catch (global::Hazelcast.Testing.Remote.CloudException tmp197)
          {
            tmp196.CloudException = tmp197;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("loginToHazelcastCloudUsingEnvironment", TMessageType.Reply, seqid), cancellationToken); 
          await tmp196.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp198)
        {
          var tmp199 = $"Error occurred in {GetType().FullName}: {tmp198.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp198, tmp199);
          else
            Console.Error.WriteLine(tmp199);
          var tmp200 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("loginToHazelcastCloudUsingEnvironment", TMessageType.Exception, seqid), cancellationToken);
          await tmp200.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task loginToHazelcastCloud_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp201 = new InternalStructs.loginToHazelcastCloud_args();
        await tmp201.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp202 = new InternalStructs.loginToHazelcastCloud_result();
        try
        {
          try
          {
            await _iAsync.loginToHazelcastCloud(tmp201.BaseUrl, tmp201.ApiKey, tmp201.ApiSecret, cancellationToken);
          }
          catch (global::Hazelcast.Testing.Remote.CloudException tmp203)
          {
            tmp202.CloudException = tmp203;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("loginToHazelcastCloud", TMessageType.Reply, seqid), cancellationToken); 
          await tmp202.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp204)
        {
          var tmp205 = $"Error occurred in {GetType().FullName}: {tmp204.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp204, tmp205);
          else
            Console.Error.WriteLine(tmp205);
          var tmp206 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("loginToHazelcastCloud", TMessageType.Exception, seqid), cancellationToken);
          await tmp206.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createHazelcastCloudStandardCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp207 = new InternalStructs.createHazelcastCloudStandardCluster_args();
        await tmp207.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp208 = new InternalStructs.createHazelcastCloudStandardCluster_result();
        try
        {
          try
          {
            tmp208.Success = await _iAsync.createHazelcastCloudStandardCluster(tmp207.HazelcastVersion, tmp207.IsTlsEnabled, cancellationToken);
          }
          catch (global::Hazelcast.Testing.Remote.CloudException tmp209)
          {
            tmp208.CloudException = tmp209;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("createHazelcastCloudStandardCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp208.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp210)
        {
          var tmp211 = $"Error occurred in {GetType().FullName}: {tmp210.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp210, tmp211);
          else
            Console.Error.WriteLine(tmp211);
          var tmp212 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createHazelcastCloudStandardCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp212.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setHazelcastCloudClusterMemberCount_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp213 = new InternalStructs.setHazelcastCloudClusterMemberCount_args();
        await tmp213.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp214 = new InternalStructs.setHazelcastCloudClusterMemberCount_result();
        try
        {
          try
          {
            await _iAsync.setHazelcastCloudClusterMemberCount(tmp213.CloudClusterId, tmp213.TotalMemberCount, cancellationToken);
          }
          catch (global::Hazelcast.Testing.Remote.CloudException tmp215)
          {
            tmp214.CloudException = tmp215;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setHazelcastCloudClusterMemberCount", TMessageType.Reply, seqid), cancellationToken); 
          await tmp214.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp216)
        {
          var tmp217 = $"Error occurred in {GetType().FullName}: {tmp216.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp216, tmp217);
          else
            Console.Error.WriteLine(tmp217);
          var tmp218 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setHazelcastCloudClusterMemberCount", TMessageType.Exception, seqid), cancellationToken);
          await tmp218.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getHazelcastCloudCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp219 = new InternalStructs.getHazelcastCloudCluster_args();
        await tmp219.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp220 = new InternalStructs.getHazelcastCloudCluster_result();
        try
        {
          try
          {
            tmp220.Success = await _iAsync.getHazelcastCloudCluster(tmp219.CloudClusterId, cancellationToken);
          }
          catch (global::Hazelcast.Testing.Remote.CloudException tmp221)
          {
            tmp220.CloudException = tmp221;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getHazelcastCloudCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp220.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp222)
        {
          var tmp223 = $"Error occurred in {GetType().FullName}: {tmp222.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp222, tmp223);
          else
            Console.Error.WriteLine(tmp223);
          var tmp224 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getHazelcastCloudCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp224.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task stopHazelcastCloudCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp225 = new InternalStructs.stopHazelcastCloudCluster_args();
        await tmp225.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp226 = new InternalStructs.stopHazelcastCloudCluster_result();
        try
        {
          try
          {
            tmp226.Success = await _iAsync.stopHazelcastCloudCluster(tmp225.CloudClusterId, cancellationToken);
          }
          catch (global::Hazelcast.Testing.Remote.CloudException tmp227)
          {
            tmp226.CloudException = tmp227;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("stopHazelcastCloudCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp226.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp228)
        {
          var tmp229 = $"Error occurred in {GetType().FullName}: {tmp228.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp228, tmp229);
          else
            Console.Error.WriteLine(tmp229);
          var tmp230 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("stopHazelcastCloudCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp230.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task resumeHazelcastCloudCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp231 = new InternalStructs.resumeHazelcastCloudCluster_args();
        await tmp231.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp232 = new InternalStructs.resumeHazelcastCloudCluster_result();
        try
        {
          try
          {
            tmp232.Success = await _iAsync.resumeHazelcastCloudCluster(tmp231.CloudClusterId, cancellationToken);
          }
          catch (global::Hazelcast.Testing.Remote.CloudException tmp233)
          {
            tmp232.CloudException = tmp233;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("resumeHazelcastCloudCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp232.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp234)
        {
          var tmp235 = $"Error occurred in {GetType().FullName}: {tmp234.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp234, tmp235);
          else
            Console.Error.WriteLine(tmp235);
          var tmp236 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("resumeHazelcastCloudCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp236.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteHazelcastCloudCluster_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp237 = new InternalStructs.deleteHazelcastCloudCluster_args();
        await tmp237.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp238 = new InternalStructs.deleteHazelcastCloudCluster_result();
        try
        {
          try
          {
            await _iAsync.deleteHazelcastCloudCluster(tmp237.CloudClusterId, cancellationToken);
          }
          catch (global::Hazelcast.Testing.Remote.CloudException tmp239)
          {
            tmp238.CloudException = tmp239;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("deleteHazelcastCloudCluster", TMessageType.Reply, seqid), cancellationToken); 
          await tmp238.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp240)
        {
          var tmp241 = $"Error occurred in {GetType().FullName}: {tmp240.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp240, tmp241);
          else
            Console.Error.WriteLine(tmp241);
          var tmp242 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deleteHazelcastCloudCluster", TMessageType.Exception, seqid), cancellationToken);
          await tmp242.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task executeOnController_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp243 = new InternalStructs.executeOnController_args();
        await tmp243.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp244 = new InternalStructs.executeOnController_result();
        try
        {
          tmp244.Success = await _iAsync.executeOnController(tmp243.ClusterId, tmp243.Script, tmp243.Lang, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("executeOnController", TMessageType.Reply, seqid), cancellationToken); 
          await tmp244.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp245)
        {
          var tmp246 = $"Error occurred in {GetType().FullName}: {tmp245.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp245, tmp246);
          else
            Console.Error.WriteLine(tmp246);
          var tmp247 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("executeOnController", TMessageType.Exception, seqid), cancellationToken);
          await tmp247.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class ping_args : TBase
      {

        public ping_args()
        {
        }

        public ping_args DeepCopy()
        {
          var tmp248 = new ping_args();
          return tmp248;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp249 = new TStruct("ping_args");
            await oprot.WriteStructBeginAsync(tmp249, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ping_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp250 = new StringBuilder("ping_args(");
          tmp250.Append(')');
          return tmp250.ToString();
        }
      }


      public partial class ping_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public ping_result()
        {
        }

        public ping_result DeepCopy()
        {
          var tmp252 = new ping_result();
          if(__isset.success)
          {
            tmp252.Success = this.Success;
          }
          tmp252.__isset.success = this.__isset.success;
          return tmp252;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp253 = new TStruct("ping_result");
            await oprot.WriteStructBeginAsync(tmp253, cancellationToken);
            var tmp254 = new TField();

            if(this.__isset.success)
            {
              tmp254.Name = "Success";
              tmp254.Type = TType.Bool;
              tmp254.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp254, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ping_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp255 = new StringBuilder("ping_result(");
          int tmp256 = 0;
          if(__isset.success)
          {
            if(0 < tmp256++) { tmp255.Append(", "); }
            tmp255.Append("Success: ");
            Success.ToString(tmp255);
          }
          tmp255.Append(')');
          return tmp255.ToString();
        }
      }


      public partial class clean_args : TBase
      {

        public clean_args()
        {
        }

        public clean_args DeepCopy()
        {
          var tmp257 = new clean_args();
          return tmp257;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp258 = new TStruct("clean_args");
            await oprot.WriteStructBeginAsync(tmp258, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is clean_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp259 = new StringBuilder("clean_args(");
          tmp259.Append(')');
          return tmp259.ToString();
        }
      }


      public partial class clean_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public clean_result()
        {
        }

        public clean_result DeepCopy()
        {
          var tmp261 = new clean_result();
          if(__isset.success)
          {
            tmp261.Success = this.Success;
          }
          tmp261.__isset.success = this.__isset.success;
          return tmp261;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp262 = new TStruct("clean_result");
            await oprot.WriteStructBeginAsync(tmp262, cancellationToken);
            var tmp263 = new TField();

            if(this.__isset.success)
            {
              tmp263.Name = "Success";
              tmp263.Type = TType.Bool;
              tmp263.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp263, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is clean_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp264 = new StringBuilder("clean_result(");
          int tmp265 = 0;
          if(__isset.success)
          {
            if(0 < tmp265++) { tmp264.Append(", "); }
            tmp264.Append("Success: ");
            Success.ToString(tmp264);
          }
          tmp264.Append(')');
          return tmp264.ToString();
        }
      }


      public partial class exit_args : TBase
      {

        public exit_args()
        {
        }

        public exit_args DeepCopy()
        {
          var tmp266 = new exit_args();
          return tmp266;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp267 = new TStruct("exit_args");
            await oprot.WriteStructBeginAsync(tmp267, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exit_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp268 = new StringBuilder("exit_args(");
          tmp268.Append(')');
          return tmp268.ToString();
        }
      }


      public partial class exit_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public exit_result()
        {
        }

        public exit_result DeepCopy()
        {
          var tmp270 = new exit_result();
          if(__isset.success)
          {
            tmp270.Success = this.Success;
          }
          tmp270.__isset.success = this.__isset.success;
          return tmp270;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp271 = new TStruct("exit_result");
            await oprot.WriteStructBeginAsync(tmp271, cancellationToken);
            var tmp272 = new TField();

            if(this.__isset.success)
            {
              tmp272.Name = "Success";
              tmp272.Type = TType.Bool;
              tmp272.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp272, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is exit_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp273 = new StringBuilder("exit_result(");
          int tmp274 = 0;
          if(__isset.success)
          {
            if(0 < tmp274++) { tmp273.Append(", "); }
            tmp273.Append("Success: ");
            Success.ToString(tmp273);
          }
          tmp273.Append(')');
          return tmp273.ToString();
        }
      }


      public partial class createCluster_args : TBase
      {
        private string _hzVersion;
        private string _xmlconfig;

        public string HzVersion
        {
          get
          {
            return _hzVersion;
          }
          set
          {
            __isset.hzVersion = true;
            this._hzVersion = value;
          }
        }

        public string Xmlconfig
        {
          get
          {
            return _xmlconfig;
          }
          set
          {
            __isset.xmlconfig = true;
            this._xmlconfig = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool hzVersion;
          public bool xmlconfig;
        }

        public createCluster_args()
        {
        }

        public createCluster_args DeepCopy()
        {
          var tmp275 = new createCluster_args();
          if((HzVersion != null) && __isset.hzVersion)
          {
            tmp275.HzVersion = this.HzVersion;
          }
          tmp275.__isset.hzVersion = this.__isset.hzVersion;
          if((Xmlconfig != null) && __isset.xmlconfig)
          {
            tmp275.Xmlconfig = this.Xmlconfig;
          }
          tmp275.__isset.xmlconfig = this.__isset.xmlconfig;
          return tmp275;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    HzVersion = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Xmlconfig = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp276 = new TStruct("createCluster_args");
            await oprot.WriteStructBeginAsync(tmp276, cancellationToken);
            var tmp277 = new TField();
            if((HzVersion != null) && __isset.hzVersion)
            {
              tmp277.Name = "hzVersion";
              tmp277.Type = TType.String;
              tmp277.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp277, cancellationToken);
              await oprot.WriteStringAsync(HzVersion, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Xmlconfig != null) && __isset.xmlconfig)
            {
              tmp277.Name = "xmlconfig";
              tmp277.Type = TType.String;
              tmp277.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp277, cancellationToken);
              await oprot.WriteStringAsync(Xmlconfig, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.hzVersion == other.__isset.hzVersion) && ((!__isset.hzVersion) || (global::System.Object.Equals(HzVersion, other.HzVersion))))
            && ((__isset.xmlconfig == other.__isset.xmlconfig) && ((!__isset.xmlconfig) || (global::System.Object.Equals(Xmlconfig, other.Xmlconfig))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((HzVersion != null) && __isset.hzVersion)
            {
              hashcode = (hashcode * 397) + HzVersion.GetHashCode();
            }
            if((Xmlconfig != null) && __isset.xmlconfig)
            {
              hashcode = (hashcode * 397) + Xmlconfig.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp278 = new StringBuilder("createCluster_args(");
          int tmp279 = 0;
          if((HzVersion != null) && __isset.hzVersion)
          {
            if(0 < tmp279++) { tmp278.Append(", "); }
            tmp278.Append("HzVersion: ");
            HzVersion.ToString(tmp278);
          }
          if((Xmlconfig != null) && __isset.xmlconfig)
          {
            if(0 < tmp279++) { tmp278.Append(", "); }
            tmp278.Append("Xmlconfig: ");
            Xmlconfig.ToString(tmp278);
          }
          tmp278.Append(')');
          return tmp278.ToString();
        }
      }


      public partial class createCluster_result : TBase
      {
        private global::Hazelcast.Testing.Remote.Cluster _success;
        private global::Hazelcast.Testing.Remote.ServerException _serverException;

        public global::Hazelcast.Testing.Remote.Cluster Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Hazelcast.Testing.Remote.ServerException ServerException
        {
          get
          {
            return _serverException;
          }
          set
          {
            __isset.serverException = true;
            this._serverException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool serverException;
        }

        public createCluster_result()
        {
        }

        public createCluster_result DeepCopy()
        {
          var tmp280 = new createCluster_result();
          if((Success != null) && __isset.success)
          {
            tmp280.Success = (global::Hazelcast.Testing.Remote.Cluster)this.Success.DeepCopy();
          }
          tmp280.__isset.success = this.__isset.success;
          if((ServerException != null) && __isset.serverException)
          {
            tmp280.ServerException = (global::Hazelcast.Testing.Remote.ServerException)this.ServerException.DeepCopy();
          }
          tmp280.__isset.serverException = this.__isset.serverException;
          return tmp280;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.Cluster();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    ServerException = new global::Hazelcast.Testing.Remote.ServerException();
                    await ServerException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp281 = new TStruct("createCluster_result");
            await oprot.WriteStructBeginAsync(tmp281, cancellationToken);
            var tmp282 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp282.Name = "Success";
                tmp282.Type = TType.Struct;
                tmp282.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp282, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.serverException)
            {
              if (ServerException != null)
              {
                tmp282.Name = "ServerException";
                tmp282.Type = TType.Struct;
                tmp282.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp282, cancellationToken);
                await ServerException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.serverException == other.__isset.serverException) && ((!__isset.serverException) || (global::System.Object.Equals(ServerException, other.ServerException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((ServerException != null) && __isset.serverException)
            {
              hashcode = (hashcode * 397) + ServerException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp283 = new StringBuilder("createCluster_result(");
          int tmp284 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp284++) { tmp283.Append(", "); }
            tmp283.Append("Success: ");
            Success.ToString(tmp283);
          }
          if((ServerException != null) && __isset.serverException)
          {
            if(0 < tmp284++) { tmp283.Append(", "); }
            tmp283.Append("ServerException: ");
            ServerException.ToString(tmp283);
          }
          tmp283.Append(')');
          return tmp283.ToString();
        }
      }


      public partial class createClusterKeepClusterName_args : TBase
      {
        private string _hzVersion;
        private string _xmlconfig;

        public string HzVersion
        {
          get
          {
            return _hzVersion;
          }
          set
          {
            __isset.hzVersion = true;
            this._hzVersion = value;
          }
        }

        public string Xmlconfig
        {
          get
          {
            return _xmlconfig;
          }
          set
          {
            __isset.xmlconfig = true;
            this._xmlconfig = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool hzVersion;
          public bool xmlconfig;
        }

        public createClusterKeepClusterName_args()
        {
        }

        public createClusterKeepClusterName_args DeepCopy()
        {
          var tmp285 = new createClusterKeepClusterName_args();
          if((HzVersion != null) && __isset.hzVersion)
          {
            tmp285.HzVersion = this.HzVersion;
          }
          tmp285.__isset.hzVersion = this.__isset.hzVersion;
          if((Xmlconfig != null) && __isset.xmlconfig)
          {
            tmp285.Xmlconfig = this.Xmlconfig;
          }
          tmp285.__isset.xmlconfig = this.__isset.xmlconfig;
          return tmp285;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    HzVersion = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Xmlconfig = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp286 = new TStruct("createClusterKeepClusterName_args");
            await oprot.WriteStructBeginAsync(tmp286, cancellationToken);
            var tmp287 = new TField();
            if((HzVersion != null) && __isset.hzVersion)
            {
              tmp287.Name = "hzVersion";
              tmp287.Type = TType.String;
              tmp287.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp287, cancellationToken);
              await oprot.WriteStringAsync(HzVersion, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Xmlconfig != null) && __isset.xmlconfig)
            {
              tmp287.Name = "xmlconfig";
              tmp287.Type = TType.String;
              tmp287.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp287, cancellationToken);
              await oprot.WriteStringAsync(Xmlconfig, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createClusterKeepClusterName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.hzVersion == other.__isset.hzVersion) && ((!__isset.hzVersion) || (global::System.Object.Equals(HzVersion, other.HzVersion))))
            && ((__isset.xmlconfig == other.__isset.xmlconfig) && ((!__isset.xmlconfig) || (global::System.Object.Equals(Xmlconfig, other.Xmlconfig))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((HzVersion != null) && __isset.hzVersion)
            {
              hashcode = (hashcode * 397) + HzVersion.GetHashCode();
            }
            if((Xmlconfig != null) && __isset.xmlconfig)
            {
              hashcode = (hashcode * 397) + Xmlconfig.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp288 = new StringBuilder("createClusterKeepClusterName_args(");
          int tmp289 = 0;
          if((HzVersion != null) && __isset.hzVersion)
          {
            if(0 < tmp289++) { tmp288.Append(", "); }
            tmp288.Append("HzVersion: ");
            HzVersion.ToString(tmp288);
          }
          if((Xmlconfig != null) && __isset.xmlconfig)
          {
            if(0 < tmp289++) { tmp288.Append(", "); }
            tmp288.Append("Xmlconfig: ");
            Xmlconfig.ToString(tmp288);
          }
          tmp288.Append(')');
          return tmp288.ToString();
        }
      }


      public partial class createClusterKeepClusterName_result : TBase
      {
        private global::Hazelcast.Testing.Remote.Cluster _success;
        private global::Hazelcast.Testing.Remote.ServerException _serverException;

        public global::Hazelcast.Testing.Remote.Cluster Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Hazelcast.Testing.Remote.ServerException ServerException
        {
          get
          {
            return _serverException;
          }
          set
          {
            __isset.serverException = true;
            this._serverException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool serverException;
        }

        public createClusterKeepClusterName_result()
        {
        }

        public createClusterKeepClusterName_result DeepCopy()
        {
          var tmp290 = new createClusterKeepClusterName_result();
          if((Success != null) && __isset.success)
          {
            tmp290.Success = (global::Hazelcast.Testing.Remote.Cluster)this.Success.DeepCopy();
          }
          tmp290.__isset.success = this.__isset.success;
          if((ServerException != null) && __isset.serverException)
          {
            tmp290.ServerException = (global::Hazelcast.Testing.Remote.ServerException)this.ServerException.DeepCopy();
          }
          tmp290.__isset.serverException = this.__isset.serverException;
          return tmp290;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.Cluster();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    ServerException = new global::Hazelcast.Testing.Remote.ServerException();
                    await ServerException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp291 = new TStruct("createClusterKeepClusterName_result");
            await oprot.WriteStructBeginAsync(tmp291, cancellationToken);
            var tmp292 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp292.Name = "Success";
                tmp292.Type = TType.Struct;
                tmp292.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp292, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.serverException)
            {
              if (ServerException != null)
              {
                tmp292.Name = "ServerException";
                tmp292.Type = TType.Struct;
                tmp292.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp292, cancellationToken);
                await ServerException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createClusterKeepClusterName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.serverException == other.__isset.serverException) && ((!__isset.serverException) || (global::System.Object.Equals(ServerException, other.ServerException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((ServerException != null) && __isset.serverException)
            {
              hashcode = (hashcode * 397) + ServerException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp293 = new StringBuilder("createClusterKeepClusterName_result(");
          int tmp294 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp294++) { tmp293.Append(", "); }
            tmp293.Append("Success: ");
            Success.ToString(tmp293);
          }
          if((ServerException != null) && __isset.serverException)
          {
            if(0 < tmp294++) { tmp293.Append(", "); }
            tmp293.Append("ServerException: ");
            ServerException.ToString(tmp293);
          }
          tmp293.Append(')');
          return tmp293.ToString();
        }
      }


      public partial class startMember_args : TBase
      {
        private string _clusterId;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
        }

        public startMember_args()
        {
        }

        public startMember_args DeepCopy()
        {
          var tmp295 = new startMember_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp295.ClusterId = this.ClusterId;
          }
          tmp295.__isset.clusterId = this.__isset.clusterId;
          return tmp295;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp296 = new TStruct("startMember_args");
            await oprot.WriteStructBeginAsync(tmp296, cancellationToken);
            var tmp297 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp297.Name = "clusterId";
              tmp297.Type = TType.String;
              tmp297.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp297, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is startMember_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (global::System.Object.Equals(ClusterId, other.ClusterId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp298 = new StringBuilder("startMember_args(");
          int tmp299 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp299++) { tmp298.Append(", "); }
            tmp298.Append("ClusterId: ");
            ClusterId.ToString(tmp298);
          }
          tmp298.Append(')');
          return tmp298.ToString();
        }
      }


      public partial class startMember_result : TBase
      {
        private global::Hazelcast.Testing.Remote.Member _success;
        private global::Hazelcast.Testing.Remote.ServerException _serverException;

        public global::Hazelcast.Testing.Remote.Member Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Hazelcast.Testing.Remote.ServerException ServerException
        {
          get
          {
            return _serverException;
          }
          set
          {
            __isset.serverException = true;
            this._serverException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool serverException;
        }

        public startMember_result()
        {
        }

        public startMember_result DeepCopy()
        {
          var tmp300 = new startMember_result();
          if((Success != null) && __isset.success)
          {
            tmp300.Success = (global::Hazelcast.Testing.Remote.Member)this.Success.DeepCopy();
          }
          tmp300.__isset.success = this.__isset.success;
          if((ServerException != null) && __isset.serverException)
          {
            tmp300.ServerException = (global::Hazelcast.Testing.Remote.ServerException)this.ServerException.DeepCopy();
          }
          tmp300.__isset.serverException = this.__isset.serverException;
          return tmp300;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.Member();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    ServerException = new global::Hazelcast.Testing.Remote.ServerException();
                    await ServerException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp301 = new TStruct("startMember_result");
            await oprot.WriteStructBeginAsync(tmp301, cancellationToken);
            var tmp302 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp302.Name = "Success";
                tmp302.Type = TType.Struct;
                tmp302.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp302, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.serverException)
            {
              if (ServerException != null)
              {
                tmp302.Name = "ServerException";
                tmp302.Type = TType.Struct;
                tmp302.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp302, cancellationToken);
                await ServerException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is startMember_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.serverException == other.__isset.serverException) && ((!__isset.serverException) || (global::System.Object.Equals(ServerException, other.ServerException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((ServerException != null) && __isset.serverException)
            {
              hashcode = (hashcode * 397) + ServerException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp303 = new StringBuilder("startMember_result(");
          int tmp304 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp304++) { tmp303.Append(", "); }
            tmp303.Append("Success: ");
            Success.ToString(tmp303);
          }
          if((ServerException != null) && __isset.serverException)
          {
            if(0 < tmp304++) { tmp303.Append(", "); }
            tmp303.Append("ServerException: ");
            ServerException.ToString(tmp303);
          }
          tmp303.Append(')');
          return tmp303.ToString();
        }
      }


      public partial class shutdownMember_args : TBase
      {
        private string _clusterId;
        private string _memberId;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }

        public string MemberId
        {
          get
          {
            return _memberId;
          }
          set
          {
            __isset.memberId = true;
            this._memberId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
          public bool memberId;
        }

        public shutdownMember_args()
        {
        }

        public shutdownMember_args DeepCopy()
        {
          var tmp305 = new shutdownMember_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp305.ClusterId = this.ClusterId;
          }
          tmp305.__isset.clusterId = this.__isset.clusterId;
          if((MemberId != null) && __isset.memberId)
          {
            tmp305.MemberId = this.MemberId;
          }
          tmp305.__isset.memberId = this.__isset.memberId;
          return tmp305;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    MemberId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp306 = new TStruct("shutdownMember_args");
            await oprot.WriteStructBeginAsync(tmp306, cancellationToken);
            var tmp307 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp307.Name = "clusterId";
              tmp307.Type = TType.String;
              tmp307.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp307, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MemberId != null) && __isset.memberId)
            {
              tmp307.Name = "memberId";
              tmp307.Type = TType.String;
              tmp307.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp307, cancellationToken);
              await oprot.WriteStringAsync(MemberId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is shutdownMember_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (global::System.Object.Equals(ClusterId, other.ClusterId))))
            && ((__isset.memberId == other.__isset.memberId) && ((!__isset.memberId) || (global::System.Object.Equals(MemberId, other.MemberId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
            if((MemberId != null) && __isset.memberId)
            {
              hashcode = (hashcode * 397) + MemberId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp308 = new StringBuilder("shutdownMember_args(");
          int tmp309 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp309++) { tmp308.Append(", "); }
            tmp308.Append("ClusterId: ");
            ClusterId.ToString(tmp308);
          }
          if((MemberId != null) && __isset.memberId)
          {
            if(0 < tmp309++) { tmp308.Append(", "); }
            tmp308.Append("MemberId: ");
            MemberId.ToString(tmp308);
          }
          tmp308.Append(')');
          return tmp308.ToString();
        }
      }


      public partial class shutdownMember_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public shutdownMember_result()
        {
        }

        public shutdownMember_result DeepCopy()
        {
          var tmp310 = new shutdownMember_result();
          if(__isset.success)
          {
            tmp310.Success = this.Success;
          }
          tmp310.__isset.success = this.__isset.success;
          return tmp310;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp311 = new TStruct("shutdownMember_result");
            await oprot.WriteStructBeginAsync(tmp311, cancellationToken);
            var tmp312 = new TField();

            if(this.__isset.success)
            {
              tmp312.Name = "Success";
              tmp312.Type = TType.Bool;
              tmp312.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp312, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is shutdownMember_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp313 = new StringBuilder("shutdownMember_result(");
          int tmp314 = 0;
          if(__isset.success)
          {
            if(0 < tmp314++) { tmp313.Append(", "); }
            tmp313.Append("Success: ");
            Success.ToString(tmp313);
          }
          tmp313.Append(')');
          return tmp313.ToString();
        }
      }


      public partial class terminateMember_args : TBase
      {
        private string _clusterId;
        private string _memberId;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }

        public string MemberId
        {
          get
          {
            return _memberId;
          }
          set
          {
            __isset.memberId = true;
            this._memberId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
          public bool memberId;
        }

        public terminateMember_args()
        {
        }

        public terminateMember_args DeepCopy()
        {
          var tmp315 = new terminateMember_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp315.ClusterId = this.ClusterId;
          }
          tmp315.__isset.clusterId = this.__isset.clusterId;
          if((MemberId != null) && __isset.memberId)
          {
            tmp315.MemberId = this.MemberId;
          }
          tmp315.__isset.memberId = this.__isset.memberId;
          return tmp315;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    MemberId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp316 = new TStruct("terminateMember_args");
            await oprot.WriteStructBeginAsync(tmp316, cancellationToken);
            var tmp317 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp317.Name = "clusterId";
              tmp317.Type = TType.String;
              tmp317.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp317, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MemberId != null) && __isset.memberId)
            {
              tmp317.Name = "memberId";
              tmp317.Type = TType.String;
              tmp317.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp317, cancellationToken);
              await oprot.WriteStringAsync(MemberId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is terminateMember_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (global::System.Object.Equals(ClusterId, other.ClusterId))))
            && ((__isset.memberId == other.__isset.memberId) && ((!__isset.memberId) || (global::System.Object.Equals(MemberId, other.MemberId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
            if((MemberId != null) && __isset.memberId)
            {
              hashcode = (hashcode * 397) + MemberId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp318 = new StringBuilder("terminateMember_args(");
          int tmp319 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp319++) { tmp318.Append(", "); }
            tmp318.Append("ClusterId: ");
            ClusterId.ToString(tmp318);
          }
          if((MemberId != null) && __isset.memberId)
          {
            if(0 < tmp319++) { tmp318.Append(", "); }
            tmp318.Append("MemberId: ");
            MemberId.ToString(tmp318);
          }
          tmp318.Append(')');
          return tmp318.ToString();
        }
      }


      public partial class terminateMember_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public terminateMember_result()
        {
        }

        public terminateMember_result DeepCopy()
        {
          var tmp320 = new terminateMember_result();
          if(__isset.success)
          {
            tmp320.Success = this.Success;
          }
          tmp320.__isset.success = this.__isset.success;
          return tmp320;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp321 = new TStruct("terminateMember_result");
            await oprot.WriteStructBeginAsync(tmp321, cancellationToken);
            var tmp322 = new TField();

            if(this.__isset.success)
            {
              tmp322.Name = "Success";
              tmp322.Type = TType.Bool;
              tmp322.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp322, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is terminateMember_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp323 = new StringBuilder("terminateMember_result(");
          int tmp324 = 0;
          if(__isset.success)
          {
            if(0 < tmp324++) { tmp323.Append(", "); }
            tmp323.Append("Success: ");
            Success.ToString(tmp323);
          }
          tmp323.Append(')');
          return tmp323.ToString();
        }
      }


      public partial class suspendMember_args : TBase
      {
        private string _clusterId;
        private string _memberId;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }

        public string MemberId
        {
          get
          {
            return _memberId;
          }
          set
          {
            __isset.memberId = true;
            this._memberId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
          public bool memberId;
        }

        public suspendMember_args()
        {
        }

        public suspendMember_args DeepCopy()
        {
          var tmp325 = new suspendMember_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp325.ClusterId = this.ClusterId;
          }
          tmp325.__isset.clusterId = this.__isset.clusterId;
          if((MemberId != null) && __isset.memberId)
          {
            tmp325.MemberId = this.MemberId;
          }
          tmp325.__isset.memberId = this.__isset.memberId;
          return tmp325;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    MemberId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp326 = new TStruct("suspendMember_args");
            await oprot.WriteStructBeginAsync(tmp326, cancellationToken);
            var tmp327 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp327.Name = "clusterId";
              tmp327.Type = TType.String;
              tmp327.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp327, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MemberId != null) && __isset.memberId)
            {
              tmp327.Name = "memberId";
              tmp327.Type = TType.String;
              tmp327.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp327, cancellationToken);
              await oprot.WriteStringAsync(MemberId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is suspendMember_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (global::System.Object.Equals(ClusterId, other.ClusterId))))
            && ((__isset.memberId == other.__isset.memberId) && ((!__isset.memberId) || (global::System.Object.Equals(MemberId, other.MemberId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
            if((MemberId != null) && __isset.memberId)
            {
              hashcode = (hashcode * 397) + MemberId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp328 = new StringBuilder("suspendMember_args(");
          int tmp329 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp329++) { tmp328.Append(", "); }
            tmp328.Append("ClusterId: ");
            ClusterId.ToString(tmp328);
          }
          if((MemberId != null) && __isset.memberId)
          {
            if(0 < tmp329++) { tmp328.Append(", "); }
            tmp328.Append("MemberId: ");
            MemberId.ToString(tmp328);
          }
          tmp328.Append(')');
          return tmp328.ToString();
        }
      }


      public partial class suspendMember_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public suspendMember_result()
        {
        }

        public suspendMember_result DeepCopy()
        {
          var tmp330 = new suspendMember_result();
          if(__isset.success)
          {
            tmp330.Success = this.Success;
          }
          tmp330.__isset.success = this.__isset.success;
          return tmp330;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp331 = new TStruct("suspendMember_result");
            await oprot.WriteStructBeginAsync(tmp331, cancellationToken);
            var tmp332 = new TField();

            if(this.__isset.success)
            {
              tmp332.Name = "Success";
              tmp332.Type = TType.Bool;
              tmp332.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp332, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is suspendMember_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp333 = new StringBuilder("suspendMember_result(");
          int tmp334 = 0;
          if(__isset.success)
          {
            if(0 < tmp334++) { tmp333.Append(", "); }
            tmp333.Append("Success: ");
            Success.ToString(tmp333);
          }
          tmp333.Append(')');
          return tmp333.ToString();
        }
      }


      public partial class resumeMember_args : TBase
      {
        private string _clusterId;
        private string _memberId;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }

        public string MemberId
        {
          get
          {
            return _memberId;
          }
          set
          {
            __isset.memberId = true;
            this._memberId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
          public bool memberId;
        }

        public resumeMember_args()
        {
        }

        public resumeMember_args DeepCopy()
        {
          var tmp335 = new resumeMember_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp335.ClusterId = this.ClusterId;
          }
          tmp335.__isset.clusterId = this.__isset.clusterId;
          if((MemberId != null) && __isset.memberId)
          {
            tmp335.MemberId = this.MemberId;
          }
          tmp335.__isset.memberId = this.__isset.memberId;
          return tmp335;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    MemberId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp336 = new TStruct("resumeMember_args");
            await oprot.WriteStructBeginAsync(tmp336, cancellationToken);
            var tmp337 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp337.Name = "clusterId";
              tmp337.Type = TType.String;
              tmp337.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp337, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MemberId != null) && __isset.memberId)
            {
              tmp337.Name = "memberId";
              tmp337.Type = TType.String;
              tmp337.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp337, cancellationToken);
              await oprot.WriteStringAsync(MemberId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is resumeMember_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (global::System.Object.Equals(ClusterId, other.ClusterId))))
            && ((__isset.memberId == other.__isset.memberId) && ((!__isset.memberId) || (global::System.Object.Equals(MemberId, other.MemberId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
            if((MemberId != null) && __isset.memberId)
            {
              hashcode = (hashcode * 397) + MemberId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp338 = new StringBuilder("resumeMember_args(");
          int tmp339 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp339++) { tmp338.Append(", "); }
            tmp338.Append("ClusterId: ");
            ClusterId.ToString(tmp338);
          }
          if((MemberId != null) && __isset.memberId)
          {
            if(0 < tmp339++) { tmp338.Append(", "); }
            tmp338.Append("MemberId: ");
            MemberId.ToString(tmp338);
          }
          tmp338.Append(')');
          return tmp338.ToString();
        }
      }


      public partial class resumeMember_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public resumeMember_result()
        {
        }

        public resumeMember_result DeepCopy()
        {
          var tmp340 = new resumeMember_result();
          if(__isset.success)
          {
            tmp340.Success = this.Success;
          }
          tmp340.__isset.success = this.__isset.success;
          return tmp340;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp341 = new TStruct("resumeMember_result");
            await oprot.WriteStructBeginAsync(tmp341, cancellationToken);
            var tmp342 = new TField();

            if(this.__isset.success)
            {
              tmp342.Name = "Success";
              tmp342.Type = TType.Bool;
              tmp342.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp342, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is resumeMember_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp343 = new StringBuilder("resumeMember_result(");
          int tmp344 = 0;
          if(__isset.success)
          {
            if(0 < tmp344++) { tmp343.Append(", "); }
            tmp343.Append("Success: ");
            Success.ToString(tmp343);
          }
          tmp343.Append(')');
          return tmp343.ToString();
        }
      }


      public partial class shutdownCluster_args : TBase
      {
        private string _clusterId;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
        }

        public shutdownCluster_args()
        {
        }

        public shutdownCluster_args DeepCopy()
        {
          var tmp345 = new shutdownCluster_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp345.ClusterId = this.ClusterId;
          }
          tmp345.__isset.clusterId = this.__isset.clusterId;
          return tmp345;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp346 = new TStruct("shutdownCluster_args");
            await oprot.WriteStructBeginAsync(tmp346, cancellationToken);
            var tmp347 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp347.Name = "clusterId";
              tmp347.Type = TType.String;
              tmp347.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp347, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is shutdownCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (global::System.Object.Equals(ClusterId, other.ClusterId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp348 = new StringBuilder("shutdownCluster_args(");
          int tmp349 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp349++) { tmp348.Append(", "); }
            tmp348.Append("ClusterId: ");
            ClusterId.ToString(tmp348);
          }
          tmp348.Append(')');
          return tmp348.ToString();
        }
      }


      public partial class shutdownCluster_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public shutdownCluster_result()
        {
        }

        public shutdownCluster_result DeepCopy()
        {
          var tmp350 = new shutdownCluster_result();
          if(__isset.success)
          {
            tmp350.Success = this.Success;
          }
          tmp350.__isset.success = this.__isset.success;
          return tmp350;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp351 = new TStruct("shutdownCluster_result");
            await oprot.WriteStructBeginAsync(tmp351, cancellationToken);
            var tmp352 = new TField();

            if(this.__isset.success)
            {
              tmp352.Name = "Success";
              tmp352.Type = TType.Bool;
              tmp352.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp352, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is shutdownCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp353 = new StringBuilder("shutdownCluster_result(");
          int tmp354 = 0;
          if(__isset.success)
          {
            if(0 < tmp354++) { tmp353.Append(", "); }
            tmp353.Append("Success: ");
            Success.ToString(tmp353);
          }
          tmp353.Append(')');
          return tmp353.ToString();
        }
      }


      public partial class terminateCluster_args : TBase
      {
        private string _clusterId;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
        }

        public terminateCluster_args()
        {
        }

        public terminateCluster_args DeepCopy()
        {
          var tmp355 = new terminateCluster_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp355.ClusterId = this.ClusterId;
          }
          tmp355.__isset.clusterId = this.__isset.clusterId;
          return tmp355;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp356 = new TStruct("terminateCluster_args");
            await oprot.WriteStructBeginAsync(tmp356, cancellationToken);
            var tmp357 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp357.Name = "clusterId";
              tmp357.Type = TType.String;
              tmp357.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp357, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is terminateCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (global::System.Object.Equals(ClusterId, other.ClusterId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp358 = new StringBuilder("terminateCluster_args(");
          int tmp359 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp359++) { tmp358.Append(", "); }
            tmp358.Append("ClusterId: ");
            ClusterId.ToString(tmp358);
          }
          tmp358.Append(')');
          return tmp358.ToString();
        }
      }


      public partial class terminateCluster_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public terminateCluster_result()
        {
        }

        public terminateCluster_result DeepCopy()
        {
          var tmp360 = new terminateCluster_result();
          if(__isset.success)
          {
            tmp360.Success = this.Success;
          }
          tmp360.__isset.success = this.__isset.success;
          return tmp360;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp361 = new TStruct("terminateCluster_result");
            await oprot.WriteStructBeginAsync(tmp361, cancellationToken);
            var tmp362 = new TField();

            if(this.__isset.success)
            {
              tmp362.Name = "Success";
              tmp362.Type = TType.Bool;
              tmp362.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp362, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is terminateCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp363 = new StringBuilder("terminateCluster_result(");
          int tmp364 = 0;
          if(__isset.success)
          {
            if(0 < tmp364++) { tmp363.Append(", "); }
            tmp363.Append("Success: ");
            Success.ToString(tmp363);
          }
          tmp363.Append(')');
          return tmp363.ToString();
        }
      }


      public partial class splitMemberFromCluster_args : TBase
      {
        private string _memberId;

        public string MemberId
        {
          get
          {
            return _memberId;
          }
          set
          {
            __isset.memberId = true;
            this._memberId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool memberId;
        }

        public splitMemberFromCluster_args()
        {
        }

        public splitMemberFromCluster_args DeepCopy()
        {
          var tmp365 = new splitMemberFromCluster_args();
          if((MemberId != null) && __isset.memberId)
          {
            tmp365.MemberId = this.MemberId;
          }
          tmp365.__isset.memberId = this.__isset.memberId;
          return tmp365;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    MemberId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp366 = new TStruct("splitMemberFromCluster_args");
            await oprot.WriteStructBeginAsync(tmp366, cancellationToken);
            var tmp367 = new TField();
            if((MemberId != null) && __isset.memberId)
            {
              tmp367.Name = "memberId";
              tmp367.Type = TType.String;
              tmp367.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp367, cancellationToken);
              await oprot.WriteStringAsync(MemberId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is splitMemberFromCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.memberId == other.__isset.memberId) && ((!__isset.memberId) || (global::System.Object.Equals(MemberId, other.MemberId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((MemberId != null) && __isset.memberId)
            {
              hashcode = (hashcode * 397) + MemberId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp368 = new StringBuilder("splitMemberFromCluster_args(");
          int tmp369 = 0;
          if((MemberId != null) && __isset.memberId)
          {
            if(0 < tmp369++) { tmp368.Append(", "); }
            tmp368.Append("MemberId: ");
            MemberId.ToString(tmp368);
          }
          tmp368.Append(')');
          return tmp368.ToString();
        }
      }


      public partial class splitMemberFromCluster_result : TBase
      {
        private global::Hazelcast.Testing.Remote.Cluster _success;

        public global::Hazelcast.Testing.Remote.Cluster Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public splitMemberFromCluster_result()
        {
        }

        public splitMemberFromCluster_result DeepCopy()
        {
          var tmp370 = new splitMemberFromCluster_result();
          if((Success != null) && __isset.success)
          {
            tmp370.Success = (global::Hazelcast.Testing.Remote.Cluster)this.Success.DeepCopy();
          }
          tmp370.__isset.success = this.__isset.success;
          return tmp370;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.Cluster();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp371 = new TStruct("splitMemberFromCluster_result");
            await oprot.WriteStructBeginAsync(tmp371, cancellationToken);
            var tmp372 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp372.Name = "Success";
                tmp372.Type = TType.Struct;
                tmp372.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp372, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is splitMemberFromCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp373 = new StringBuilder("splitMemberFromCluster_result(");
          int tmp374 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp374++) { tmp373.Append(", "); }
            tmp373.Append("Success: ");
            Success.ToString(tmp373);
          }
          tmp373.Append(')');
          return tmp373.ToString();
        }
      }


      public partial class mergeMemberToCluster_args : TBase
      {
        private string _clusterId;
        private string _memberId;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }

        public string MemberId
        {
          get
          {
            return _memberId;
          }
          set
          {
            __isset.memberId = true;
            this._memberId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
          public bool memberId;
        }

        public mergeMemberToCluster_args()
        {
        }

        public mergeMemberToCluster_args DeepCopy()
        {
          var tmp375 = new mergeMemberToCluster_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp375.ClusterId = this.ClusterId;
          }
          tmp375.__isset.clusterId = this.__isset.clusterId;
          if((MemberId != null) && __isset.memberId)
          {
            tmp375.MemberId = this.MemberId;
          }
          tmp375.__isset.memberId = this.__isset.memberId;
          return tmp375;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    MemberId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp376 = new TStruct("mergeMemberToCluster_args");
            await oprot.WriteStructBeginAsync(tmp376, cancellationToken);
            var tmp377 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp377.Name = "clusterId";
              tmp377.Type = TType.String;
              tmp377.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp377, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((MemberId != null) && __isset.memberId)
            {
              tmp377.Name = "memberId";
              tmp377.Type = TType.String;
              tmp377.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp377, cancellationToken);
              await oprot.WriteStringAsync(MemberId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is mergeMemberToCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (global::System.Object.Equals(ClusterId, other.ClusterId))))
            && ((__isset.memberId == other.__isset.memberId) && ((!__isset.memberId) || (global::System.Object.Equals(MemberId, other.MemberId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
            if((MemberId != null) && __isset.memberId)
            {
              hashcode = (hashcode * 397) + MemberId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp378 = new StringBuilder("mergeMemberToCluster_args(");
          int tmp379 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp379++) { tmp378.Append(", "); }
            tmp378.Append("ClusterId: ");
            ClusterId.ToString(tmp378);
          }
          if((MemberId != null) && __isset.memberId)
          {
            if(0 < tmp379++) { tmp378.Append(", "); }
            tmp378.Append("MemberId: ");
            MemberId.ToString(tmp378);
          }
          tmp378.Append(')');
          return tmp378.ToString();
        }
      }


      public partial class mergeMemberToCluster_result : TBase
      {
        private global::Hazelcast.Testing.Remote.Cluster _success;

        public global::Hazelcast.Testing.Remote.Cluster Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public mergeMemberToCluster_result()
        {
        }

        public mergeMemberToCluster_result DeepCopy()
        {
          var tmp380 = new mergeMemberToCluster_result();
          if((Success != null) && __isset.success)
          {
            tmp380.Success = (global::Hazelcast.Testing.Remote.Cluster)this.Success.DeepCopy();
          }
          tmp380.__isset.success = this.__isset.success;
          return tmp380;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.Cluster();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp381 = new TStruct("mergeMemberToCluster_result");
            await oprot.WriteStructBeginAsync(tmp381, cancellationToken);
            var tmp382 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp382.Name = "Success";
                tmp382.Type = TType.Struct;
                tmp382.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp382, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is mergeMemberToCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp383 = new StringBuilder("mergeMemberToCluster_result(");
          int tmp384 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp384++) { tmp383.Append(", "); }
            tmp383.Append("Success: ");
            Success.ToString(tmp383);
          }
          tmp383.Append(')');
          return tmp383.ToString();
        }
      }


      public partial class loginToHazelcastCloudUsingEnvironment_args : TBase
      {

        public loginToHazelcastCloudUsingEnvironment_args()
        {
        }

        public loginToHazelcastCloudUsingEnvironment_args DeepCopy()
        {
          var tmp385 = new loginToHazelcastCloudUsingEnvironment_args();
          return tmp385;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp386 = new TStruct("loginToHazelcastCloudUsingEnvironment_args");
            await oprot.WriteStructBeginAsync(tmp386, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is loginToHazelcastCloudUsingEnvironment_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp387 = new StringBuilder("loginToHazelcastCloudUsingEnvironment_args(");
          tmp387.Append(')');
          return tmp387.ToString();
        }
      }


      public partial class loginToHazelcastCloudUsingEnvironment_result : TBase
      {
        private global::Hazelcast.Testing.Remote.CloudException _cloudException;

        public global::Hazelcast.Testing.Remote.CloudException CloudException
        {
          get
          {
            return _cloudException;
          }
          set
          {
            __isset.cloudException = true;
            this._cloudException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool cloudException;
        }

        public loginToHazelcastCloudUsingEnvironment_result()
        {
        }

        public loginToHazelcastCloudUsingEnvironment_result DeepCopy()
        {
          var tmp389 = new loginToHazelcastCloudUsingEnvironment_result();
          if((CloudException != null) && __isset.cloudException)
          {
            tmp389.CloudException = (global::Hazelcast.Testing.Remote.CloudException)this.CloudException.DeepCopy();
          }
          tmp389.__isset.cloudException = this.__isset.cloudException;
          return tmp389;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    CloudException = new global::Hazelcast.Testing.Remote.CloudException();
                    await CloudException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp390 = new TStruct("loginToHazelcastCloudUsingEnvironment_result");
            await oprot.WriteStructBeginAsync(tmp390, cancellationToken);
            var tmp391 = new TField();

            if(this.__isset.cloudException)
            {
              if (CloudException != null)
              {
                tmp391.Name = "CloudException";
                tmp391.Type = TType.Struct;
                tmp391.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp391, cancellationToken);
                await CloudException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is loginToHazelcastCloudUsingEnvironment_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.cloudException == other.__isset.cloudException) && ((!__isset.cloudException) || (global::System.Object.Equals(CloudException, other.CloudException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((CloudException != null) && __isset.cloudException)
            {
              hashcode = (hashcode * 397) + CloudException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp392 = new StringBuilder("loginToHazelcastCloudUsingEnvironment_result(");
          int tmp393 = 0;
          if((CloudException != null) && __isset.cloudException)
          {
            if(0 < tmp393++) { tmp392.Append(", "); }
            tmp392.Append("CloudException: ");
            CloudException.ToString(tmp392);
          }
          tmp392.Append(')');
          return tmp392.ToString();
        }
      }


      public partial class loginToHazelcastCloud_args : TBase
      {
        private string _baseUrl;
        private string _apiKey;
        private string _apiSecret;

        public string BaseUrl
        {
          get
          {
            return _baseUrl;
          }
          set
          {
            __isset.baseUrl = true;
            this._baseUrl = value;
          }
        }

        public string ApiKey
        {
          get
          {
            return _apiKey;
          }
          set
          {
            __isset.apiKey = true;
            this._apiKey = value;
          }
        }

        public string ApiSecret
        {
          get
          {
            return _apiSecret;
          }
          set
          {
            __isset.apiSecret = true;
            this._apiSecret = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool baseUrl;
          public bool apiKey;
          public bool apiSecret;
        }

        public loginToHazelcastCloud_args()
        {
        }

        public loginToHazelcastCloud_args DeepCopy()
        {
          var tmp394 = new loginToHazelcastCloud_args();
          if((BaseUrl != null) && __isset.baseUrl)
          {
            tmp394.BaseUrl = this.BaseUrl;
          }
          tmp394.__isset.baseUrl = this.__isset.baseUrl;
          if((ApiKey != null) && __isset.apiKey)
          {
            tmp394.ApiKey = this.ApiKey;
          }
          tmp394.__isset.apiKey = this.__isset.apiKey;
          if((ApiSecret != null) && __isset.apiSecret)
          {
            tmp394.ApiSecret = this.ApiSecret;
          }
          tmp394.__isset.apiSecret = this.__isset.apiSecret;
          return tmp394;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    BaseUrl = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ApiKey = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    ApiSecret = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp395 = new TStruct("loginToHazelcastCloud_args");
            await oprot.WriteStructBeginAsync(tmp395, cancellationToken);
            var tmp396 = new TField();
            if((BaseUrl != null) && __isset.baseUrl)
            {
              tmp396.Name = "baseUrl";
              tmp396.Type = TType.String;
              tmp396.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp396, cancellationToken);
              await oprot.WriteStringAsync(BaseUrl, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ApiKey != null) && __isset.apiKey)
            {
              tmp396.Name = "apiKey";
              tmp396.Type = TType.String;
              tmp396.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp396, cancellationToken);
              await oprot.WriteStringAsync(ApiKey, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ApiSecret != null) && __isset.apiSecret)
            {
              tmp396.Name = "apiSecret";
              tmp396.Type = TType.String;
              tmp396.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp396, cancellationToken);
              await oprot.WriteStringAsync(ApiSecret, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is loginToHazelcastCloud_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.baseUrl == other.__isset.baseUrl) && ((!__isset.baseUrl) || (global::System.Object.Equals(BaseUrl, other.BaseUrl))))
            && ((__isset.apiKey == other.__isset.apiKey) && ((!__isset.apiKey) || (global::System.Object.Equals(ApiKey, other.ApiKey))))
            && ((__isset.apiSecret == other.__isset.apiSecret) && ((!__isset.apiSecret) || (global::System.Object.Equals(ApiSecret, other.ApiSecret))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((BaseUrl != null) && __isset.baseUrl)
            {
              hashcode = (hashcode * 397) + BaseUrl.GetHashCode();
            }
            if((ApiKey != null) && __isset.apiKey)
            {
              hashcode = (hashcode * 397) + ApiKey.GetHashCode();
            }
            if((ApiSecret != null) && __isset.apiSecret)
            {
              hashcode = (hashcode * 397) + ApiSecret.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp397 = new StringBuilder("loginToHazelcastCloud_args(");
          int tmp398 = 0;
          if((BaseUrl != null) && __isset.baseUrl)
          {
            if(0 < tmp398++) { tmp397.Append(", "); }
            tmp397.Append("BaseUrl: ");
            BaseUrl.ToString(tmp397);
          }
          if((ApiKey != null) && __isset.apiKey)
          {
            if(0 < tmp398++) { tmp397.Append(", "); }
            tmp397.Append("ApiKey: ");
            ApiKey.ToString(tmp397);
          }
          if((ApiSecret != null) && __isset.apiSecret)
          {
            if(0 < tmp398++) { tmp397.Append(", "); }
            tmp397.Append("ApiSecret: ");
            ApiSecret.ToString(tmp397);
          }
          tmp397.Append(')');
          return tmp397.ToString();
        }
      }


      public partial class loginToHazelcastCloud_result : TBase
      {
        private global::Hazelcast.Testing.Remote.CloudException _cloudException;

        public global::Hazelcast.Testing.Remote.CloudException CloudException
        {
          get
          {
            return _cloudException;
          }
          set
          {
            __isset.cloudException = true;
            this._cloudException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool cloudException;
        }

        public loginToHazelcastCloud_result()
        {
        }

        public loginToHazelcastCloud_result DeepCopy()
        {
          var tmp399 = new loginToHazelcastCloud_result();
          if((CloudException != null) && __isset.cloudException)
          {
            tmp399.CloudException = (global::Hazelcast.Testing.Remote.CloudException)this.CloudException.DeepCopy();
          }
          tmp399.__isset.cloudException = this.__isset.cloudException;
          return tmp399;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    CloudException = new global::Hazelcast.Testing.Remote.CloudException();
                    await CloudException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp400 = new TStruct("loginToHazelcastCloud_result");
            await oprot.WriteStructBeginAsync(tmp400, cancellationToken);
            var tmp401 = new TField();

            if(this.__isset.cloudException)
            {
              if (CloudException != null)
              {
                tmp401.Name = "CloudException";
                tmp401.Type = TType.Struct;
                tmp401.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp401, cancellationToken);
                await CloudException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is loginToHazelcastCloud_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.cloudException == other.__isset.cloudException) && ((!__isset.cloudException) || (global::System.Object.Equals(CloudException, other.CloudException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((CloudException != null) && __isset.cloudException)
            {
              hashcode = (hashcode * 397) + CloudException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp402 = new StringBuilder("loginToHazelcastCloud_result(");
          int tmp403 = 0;
          if((CloudException != null) && __isset.cloudException)
          {
            if(0 < tmp403++) { tmp402.Append(", "); }
            tmp402.Append("CloudException: ");
            CloudException.ToString(tmp402);
          }
          tmp402.Append(')');
          return tmp402.ToString();
        }
      }


      public partial class createHazelcastCloudStandardCluster_args : TBase
      {
        private string _hazelcastVersion;
        private bool _isTlsEnabled;

        public string HazelcastVersion
        {
          get
          {
            return _hazelcastVersion;
          }
          set
          {
            __isset.hazelcastVersion = true;
            this._hazelcastVersion = value;
          }
        }

        public bool IsTlsEnabled
        {
          get
          {
            return _isTlsEnabled;
          }
          set
          {
            __isset.isTlsEnabled = true;
            this._isTlsEnabled = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool hazelcastVersion;
          public bool isTlsEnabled;
        }

        public createHazelcastCloudStandardCluster_args()
        {
        }

        public createHazelcastCloudStandardCluster_args DeepCopy()
        {
          var tmp404 = new createHazelcastCloudStandardCluster_args();
          if((HazelcastVersion != null) && __isset.hazelcastVersion)
          {
            tmp404.HazelcastVersion = this.HazelcastVersion;
          }
          tmp404.__isset.hazelcastVersion = this.__isset.hazelcastVersion;
          if(__isset.isTlsEnabled)
          {
            tmp404.IsTlsEnabled = this.IsTlsEnabled;
          }
          tmp404.__isset.isTlsEnabled = this.__isset.isTlsEnabled;
          return tmp404;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    HazelcastVersion = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Bool)
                  {
                    IsTlsEnabled = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp405 = new TStruct("createHazelcastCloudStandardCluster_args");
            await oprot.WriteStructBeginAsync(tmp405, cancellationToken);
            var tmp406 = new TField();
            if((HazelcastVersion != null) && __isset.hazelcastVersion)
            {
              tmp406.Name = "hazelcastVersion";
              tmp406.Type = TType.String;
              tmp406.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp406, cancellationToken);
              await oprot.WriteStringAsync(HazelcastVersion, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.isTlsEnabled)
            {
              tmp406.Name = "isTlsEnabled";
              tmp406.Type = TType.Bool;
              tmp406.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp406, cancellationToken);
              await oprot.WriteBoolAsync(IsTlsEnabled, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createHazelcastCloudStandardCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.hazelcastVersion == other.__isset.hazelcastVersion) && ((!__isset.hazelcastVersion) || (global::System.Object.Equals(HazelcastVersion, other.HazelcastVersion))))
            && ((__isset.isTlsEnabled == other.__isset.isTlsEnabled) && ((!__isset.isTlsEnabled) || (global::System.Object.Equals(IsTlsEnabled, other.IsTlsEnabled))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((HazelcastVersion != null) && __isset.hazelcastVersion)
            {
              hashcode = (hashcode * 397) + HazelcastVersion.GetHashCode();
            }
            if(__isset.isTlsEnabled)
            {
              hashcode = (hashcode * 397) + IsTlsEnabled.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp407 = new StringBuilder("createHazelcastCloudStandardCluster_args(");
          int tmp408 = 0;
          if((HazelcastVersion != null) && __isset.hazelcastVersion)
          {
            if(0 < tmp408++) { tmp407.Append(", "); }
            tmp407.Append("HazelcastVersion: ");
            HazelcastVersion.ToString(tmp407);
          }
          if(__isset.isTlsEnabled)
          {
            if(0 < tmp408++) { tmp407.Append(", "); }
            tmp407.Append("IsTlsEnabled: ");
            IsTlsEnabled.ToString(tmp407);
          }
          tmp407.Append(')');
          return tmp407.ToString();
        }
      }


      public partial class createHazelcastCloudStandardCluster_result : TBase
      {
        private global::Hazelcast.Testing.Remote.CloudCluster _success;
        private global::Hazelcast.Testing.Remote.CloudException _cloudException;

        public global::Hazelcast.Testing.Remote.CloudCluster Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Hazelcast.Testing.Remote.CloudException CloudException
        {
          get
          {
            return _cloudException;
          }
          set
          {
            __isset.cloudException = true;
            this._cloudException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool cloudException;
        }

        public createHazelcastCloudStandardCluster_result()
        {
        }

        public createHazelcastCloudStandardCluster_result DeepCopy()
        {
          var tmp409 = new createHazelcastCloudStandardCluster_result();
          if((Success != null) && __isset.success)
          {
            tmp409.Success = (global::Hazelcast.Testing.Remote.CloudCluster)this.Success.DeepCopy();
          }
          tmp409.__isset.success = this.__isset.success;
          if((CloudException != null) && __isset.cloudException)
          {
            tmp409.CloudException = (global::Hazelcast.Testing.Remote.CloudException)this.CloudException.DeepCopy();
          }
          tmp409.__isset.cloudException = this.__isset.cloudException;
          return tmp409;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.CloudCluster();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    CloudException = new global::Hazelcast.Testing.Remote.CloudException();
                    await CloudException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp410 = new TStruct("createHazelcastCloudStandardCluster_result");
            await oprot.WriteStructBeginAsync(tmp410, cancellationToken);
            var tmp411 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp411.Name = "Success";
                tmp411.Type = TType.Struct;
                tmp411.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp411, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.cloudException)
            {
              if (CloudException != null)
              {
                tmp411.Name = "CloudException";
                tmp411.Type = TType.Struct;
                tmp411.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp411, cancellationToken);
                await CloudException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createHazelcastCloudStandardCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.cloudException == other.__isset.cloudException) && ((!__isset.cloudException) || (global::System.Object.Equals(CloudException, other.CloudException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((CloudException != null) && __isset.cloudException)
            {
              hashcode = (hashcode * 397) + CloudException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp412 = new StringBuilder("createHazelcastCloudStandardCluster_result(");
          int tmp413 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp413++) { tmp412.Append(", "); }
            tmp412.Append("Success: ");
            Success.ToString(tmp412);
          }
          if((CloudException != null) && __isset.cloudException)
          {
            if(0 < tmp413++) { tmp412.Append(", "); }
            tmp412.Append("CloudException: ");
            CloudException.ToString(tmp412);
          }
          tmp412.Append(')');
          return tmp412.ToString();
        }
      }


      public partial class setHazelcastCloudClusterMemberCount_args : TBase
      {
        private string _cloudClusterId;
        private int _totalMemberCount;

        public string CloudClusterId
        {
          get
          {
            return _cloudClusterId;
          }
          set
          {
            __isset.cloudClusterId = true;
            this._cloudClusterId = value;
          }
        }

        public int TotalMemberCount
        {
          get
          {
            return _totalMemberCount;
          }
          set
          {
            __isset.totalMemberCount = true;
            this._totalMemberCount = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool cloudClusterId;
          public bool totalMemberCount;
        }

        public setHazelcastCloudClusterMemberCount_args()
        {
        }

        public setHazelcastCloudClusterMemberCount_args DeepCopy()
        {
          var tmp414 = new setHazelcastCloudClusterMemberCount_args();
          if((CloudClusterId != null) && __isset.cloudClusterId)
          {
            tmp414.CloudClusterId = this.CloudClusterId;
          }
          tmp414.__isset.cloudClusterId = this.__isset.cloudClusterId;
          if(__isset.totalMemberCount)
          {
            tmp414.TotalMemberCount = this.TotalMemberCount;
          }
          tmp414.__isset.totalMemberCount = this.__isset.totalMemberCount;
          return tmp414;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    CloudClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    TotalMemberCount = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp415 = new TStruct("setHazelcastCloudClusterMemberCount_args");
            await oprot.WriteStructBeginAsync(tmp415, cancellationToken);
            var tmp416 = new TField();
            if((CloudClusterId != null) && __isset.cloudClusterId)
            {
              tmp416.Name = "cloudClusterId";
              tmp416.Type = TType.String;
              tmp416.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp416, cancellationToken);
              await oprot.WriteStringAsync(CloudClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.totalMemberCount)
            {
              tmp416.Name = "totalMemberCount";
              tmp416.Type = TType.I32;
              tmp416.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp416, cancellationToken);
              await oprot.WriteI32Async(TotalMemberCount, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setHazelcastCloudClusterMemberCount_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.cloudClusterId == other.__isset.cloudClusterId) && ((!__isset.cloudClusterId) || (global::System.Object.Equals(CloudClusterId, other.CloudClusterId))))
            && ((__isset.totalMemberCount == other.__isset.totalMemberCount) && ((!__isset.totalMemberCount) || (global::System.Object.Equals(TotalMemberCount, other.TotalMemberCount))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((CloudClusterId != null) && __isset.cloudClusterId)
            {
              hashcode = (hashcode * 397) + CloudClusterId.GetHashCode();
            }
            if(__isset.totalMemberCount)
            {
              hashcode = (hashcode * 397) + TotalMemberCount.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp417 = new StringBuilder("setHazelcastCloudClusterMemberCount_args(");
          int tmp418 = 0;
          if((CloudClusterId != null) && __isset.cloudClusterId)
          {
            if(0 < tmp418++) { tmp417.Append(", "); }
            tmp417.Append("CloudClusterId: ");
            CloudClusterId.ToString(tmp417);
          }
          if(__isset.totalMemberCount)
          {
            if(0 < tmp418++) { tmp417.Append(", "); }
            tmp417.Append("TotalMemberCount: ");
            TotalMemberCount.ToString(tmp417);
          }
          tmp417.Append(')');
          return tmp417.ToString();
        }
      }


      public partial class setHazelcastCloudClusterMemberCount_result : TBase
      {
        private global::Hazelcast.Testing.Remote.CloudException _cloudException;

        public global::Hazelcast.Testing.Remote.CloudException CloudException
        {
          get
          {
            return _cloudException;
          }
          set
          {
            __isset.cloudException = true;
            this._cloudException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool cloudException;
        }

        public setHazelcastCloudClusterMemberCount_result()
        {
        }

        public setHazelcastCloudClusterMemberCount_result DeepCopy()
        {
          var tmp419 = new setHazelcastCloudClusterMemberCount_result();
          if((CloudException != null) && __isset.cloudException)
          {
            tmp419.CloudException = (global::Hazelcast.Testing.Remote.CloudException)this.CloudException.DeepCopy();
          }
          tmp419.__isset.cloudException = this.__isset.cloudException;
          return tmp419;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    CloudException = new global::Hazelcast.Testing.Remote.CloudException();
                    await CloudException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp420 = new TStruct("setHazelcastCloudClusterMemberCount_result");
            await oprot.WriteStructBeginAsync(tmp420, cancellationToken);
            var tmp421 = new TField();

            if(this.__isset.cloudException)
            {
              if (CloudException != null)
              {
                tmp421.Name = "CloudException";
                tmp421.Type = TType.Struct;
                tmp421.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp421, cancellationToken);
                await CloudException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setHazelcastCloudClusterMemberCount_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.cloudException == other.__isset.cloudException) && ((!__isset.cloudException) || (global::System.Object.Equals(CloudException, other.CloudException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((CloudException != null) && __isset.cloudException)
            {
              hashcode = (hashcode * 397) + CloudException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp422 = new StringBuilder("setHazelcastCloudClusterMemberCount_result(");
          int tmp423 = 0;
          if((CloudException != null) && __isset.cloudException)
          {
            if(0 < tmp423++) { tmp422.Append(", "); }
            tmp422.Append("CloudException: ");
            CloudException.ToString(tmp422);
          }
          tmp422.Append(')');
          return tmp422.ToString();
        }
      }


      public partial class getHazelcastCloudCluster_args : TBase
      {
        private string _cloudClusterId;

        public string CloudClusterId
        {
          get
          {
            return _cloudClusterId;
          }
          set
          {
            __isset.cloudClusterId = true;
            this._cloudClusterId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool cloudClusterId;
        }

        public getHazelcastCloudCluster_args()
        {
        }

        public getHazelcastCloudCluster_args DeepCopy()
        {
          var tmp424 = new getHazelcastCloudCluster_args();
          if((CloudClusterId != null) && __isset.cloudClusterId)
          {
            tmp424.CloudClusterId = this.CloudClusterId;
          }
          tmp424.__isset.cloudClusterId = this.__isset.cloudClusterId;
          return tmp424;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    CloudClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp425 = new TStruct("getHazelcastCloudCluster_args");
            await oprot.WriteStructBeginAsync(tmp425, cancellationToken);
            var tmp426 = new TField();
            if((CloudClusterId != null) && __isset.cloudClusterId)
            {
              tmp426.Name = "cloudClusterId";
              tmp426.Type = TType.String;
              tmp426.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp426, cancellationToken);
              await oprot.WriteStringAsync(CloudClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getHazelcastCloudCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.cloudClusterId == other.__isset.cloudClusterId) && ((!__isset.cloudClusterId) || (global::System.Object.Equals(CloudClusterId, other.CloudClusterId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((CloudClusterId != null) && __isset.cloudClusterId)
            {
              hashcode = (hashcode * 397) + CloudClusterId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp427 = new StringBuilder("getHazelcastCloudCluster_args(");
          int tmp428 = 0;
          if((CloudClusterId != null) && __isset.cloudClusterId)
          {
            if(0 < tmp428++) { tmp427.Append(", "); }
            tmp427.Append("CloudClusterId: ");
            CloudClusterId.ToString(tmp427);
          }
          tmp427.Append(')');
          return tmp427.ToString();
        }
      }


      public partial class getHazelcastCloudCluster_result : TBase
      {
        private global::Hazelcast.Testing.Remote.CloudCluster _success;
        private global::Hazelcast.Testing.Remote.CloudException _cloudException;

        public global::Hazelcast.Testing.Remote.CloudCluster Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Hazelcast.Testing.Remote.CloudException CloudException
        {
          get
          {
            return _cloudException;
          }
          set
          {
            __isset.cloudException = true;
            this._cloudException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool cloudException;
        }

        public getHazelcastCloudCluster_result()
        {
        }

        public getHazelcastCloudCluster_result DeepCopy()
        {
          var tmp429 = new getHazelcastCloudCluster_result();
          if((Success != null) && __isset.success)
          {
            tmp429.Success = (global::Hazelcast.Testing.Remote.CloudCluster)this.Success.DeepCopy();
          }
          tmp429.__isset.success = this.__isset.success;
          if((CloudException != null) && __isset.cloudException)
          {
            tmp429.CloudException = (global::Hazelcast.Testing.Remote.CloudException)this.CloudException.DeepCopy();
          }
          tmp429.__isset.cloudException = this.__isset.cloudException;
          return tmp429;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.CloudCluster();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    CloudException = new global::Hazelcast.Testing.Remote.CloudException();
                    await CloudException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp430 = new TStruct("getHazelcastCloudCluster_result");
            await oprot.WriteStructBeginAsync(tmp430, cancellationToken);
            var tmp431 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp431.Name = "Success";
                tmp431.Type = TType.Struct;
                tmp431.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp431, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.cloudException)
            {
              if (CloudException != null)
              {
                tmp431.Name = "CloudException";
                tmp431.Type = TType.Struct;
                tmp431.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp431, cancellationToken);
                await CloudException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getHazelcastCloudCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.cloudException == other.__isset.cloudException) && ((!__isset.cloudException) || (global::System.Object.Equals(CloudException, other.CloudException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((CloudException != null) && __isset.cloudException)
            {
              hashcode = (hashcode * 397) + CloudException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp432 = new StringBuilder("getHazelcastCloudCluster_result(");
          int tmp433 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp433++) { tmp432.Append(", "); }
            tmp432.Append("Success: ");
            Success.ToString(tmp432);
          }
          if((CloudException != null) && __isset.cloudException)
          {
            if(0 < tmp433++) { tmp432.Append(", "); }
            tmp432.Append("CloudException: ");
            CloudException.ToString(tmp432);
          }
          tmp432.Append(')');
          return tmp432.ToString();
        }
      }


      public partial class stopHazelcastCloudCluster_args : TBase
      {
        private string _cloudClusterId;

        public string CloudClusterId
        {
          get
          {
            return _cloudClusterId;
          }
          set
          {
            __isset.cloudClusterId = true;
            this._cloudClusterId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool cloudClusterId;
        }

        public stopHazelcastCloudCluster_args()
        {
        }

        public stopHazelcastCloudCluster_args DeepCopy()
        {
          var tmp434 = new stopHazelcastCloudCluster_args();
          if((CloudClusterId != null) && __isset.cloudClusterId)
          {
            tmp434.CloudClusterId = this.CloudClusterId;
          }
          tmp434.__isset.cloudClusterId = this.__isset.cloudClusterId;
          return tmp434;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    CloudClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp435 = new TStruct("stopHazelcastCloudCluster_args");
            await oprot.WriteStructBeginAsync(tmp435, cancellationToken);
            var tmp436 = new TField();
            if((CloudClusterId != null) && __isset.cloudClusterId)
            {
              tmp436.Name = "cloudClusterId";
              tmp436.Type = TType.String;
              tmp436.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp436, cancellationToken);
              await oprot.WriteStringAsync(CloudClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is stopHazelcastCloudCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.cloudClusterId == other.__isset.cloudClusterId) && ((!__isset.cloudClusterId) || (global::System.Object.Equals(CloudClusterId, other.CloudClusterId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((CloudClusterId != null) && __isset.cloudClusterId)
            {
              hashcode = (hashcode * 397) + CloudClusterId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp437 = new StringBuilder("stopHazelcastCloudCluster_args(");
          int tmp438 = 0;
          if((CloudClusterId != null) && __isset.cloudClusterId)
          {
            if(0 < tmp438++) { tmp437.Append(", "); }
            tmp437.Append("CloudClusterId: ");
            CloudClusterId.ToString(tmp437);
          }
          tmp437.Append(')');
          return tmp437.ToString();
        }
      }


      public partial class stopHazelcastCloudCluster_result : TBase
      {
        private global::Hazelcast.Testing.Remote.CloudCluster _success;
        private global::Hazelcast.Testing.Remote.CloudException _cloudException;

        public global::Hazelcast.Testing.Remote.CloudCluster Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Hazelcast.Testing.Remote.CloudException CloudException
        {
          get
          {
            return _cloudException;
          }
          set
          {
            __isset.cloudException = true;
            this._cloudException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool cloudException;
        }

        public stopHazelcastCloudCluster_result()
        {
        }

        public stopHazelcastCloudCluster_result DeepCopy()
        {
          var tmp439 = new stopHazelcastCloudCluster_result();
          if((Success != null) && __isset.success)
          {
            tmp439.Success = (global::Hazelcast.Testing.Remote.CloudCluster)this.Success.DeepCopy();
          }
          tmp439.__isset.success = this.__isset.success;
          if((CloudException != null) && __isset.cloudException)
          {
            tmp439.CloudException = (global::Hazelcast.Testing.Remote.CloudException)this.CloudException.DeepCopy();
          }
          tmp439.__isset.cloudException = this.__isset.cloudException;
          return tmp439;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.CloudCluster();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    CloudException = new global::Hazelcast.Testing.Remote.CloudException();
                    await CloudException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp440 = new TStruct("stopHazelcastCloudCluster_result");
            await oprot.WriteStructBeginAsync(tmp440, cancellationToken);
            var tmp441 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp441.Name = "Success";
                tmp441.Type = TType.Struct;
                tmp441.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp441, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.cloudException)
            {
              if (CloudException != null)
              {
                tmp441.Name = "CloudException";
                tmp441.Type = TType.Struct;
                tmp441.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp441, cancellationToken);
                await CloudException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is stopHazelcastCloudCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.cloudException == other.__isset.cloudException) && ((!__isset.cloudException) || (global::System.Object.Equals(CloudException, other.CloudException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((CloudException != null) && __isset.cloudException)
            {
              hashcode = (hashcode * 397) + CloudException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp442 = new StringBuilder("stopHazelcastCloudCluster_result(");
          int tmp443 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp443++) { tmp442.Append(", "); }
            tmp442.Append("Success: ");
            Success.ToString(tmp442);
          }
          if((CloudException != null) && __isset.cloudException)
          {
            if(0 < tmp443++) { tmp442.Append(", "); }
            tmp442.Append("CloudException: ");
            CloudException.ToString(tmp442);
          }
          tmp442.Append(')');
          return tmp442.ToString();
        }
      }


      public partial class resumeHazelcastCloudCluster_args : TBase
      {
        private string _cloudClusterId;

        public string CloudClusterId
        {
          get
          {
            return _cloudClusterId;
          }
          set
          {
            __isset.cloudClusterId = true;
            this._cloudClusterId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool cloudClusterId;
        }

        public resumeHazelcastCloudCluster_args()
        {
        }

        public resumeHazelcastCloudCluster_args DeepCopy()
        {
          var tmp444 = new resumeHazelcastCloudCluster_args();
          if((CloudClusterId != null) && __isset.cloudClusterId)
          {
            tmp444.CloudClusterId = this.CloudClusterId;
          }
          tmp444.__isset.cloudClusterId = this.__isset.cloudClusterId;
          return tmp444;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    CloudClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp445 = new TStruct("resumeHazelcastCloudCluster_args");
            await oprot.WriteStructBeginAsync(tmp445, cancellationToken);
            var tmp446 = new TField();
            if((CloudClusterId != null) && __isset.cloudClusterId)
            {
              tmp446.Name = "cloudClusterId";
              tmp446.Type = TType.String;
              tmp446.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp446, cancellationToken);
              await oprot.WriteStringAsync(CloudClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is resumeHazelcastCloudCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.cloudClusterId == other.__isset.cloudClusterId) && ((!__isset.cloudClusterId) || (global::System.Object.Equals(CloudClusterId, other.CloudClusterId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((CloudClusterId != null) && __isset.cloudClusterId)
            {
              hashcode = (hashcode * 397) + CloudClusterId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp447 = new StringBuilder("resumeHazelcastCloudCluster_args(");
          int tmp448 = 0;
          if((CloudClusterId != null) && __isset.cloudClusterId)
          {
            if(0 < tmp448++) { tmp447.Append(", "); }
            tmp447.Append("CloudClusterId: ");
            CloudClusterId.ToString(tmp447);
          }
          tmp447.Append(')');
          return tmp447.ToString();
        }
      }


      public partial class resumeHazelcastCloudCluster_result : TBase
      {
        private global::Hazelcast.Testing.Remote.CloudCluster _success;
        private global::Hazelcast.Testing.Remote.CloudException _cloudException;

        public global::Hazelcast.Testing.Remote.CloudCluster Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::Hazelcast.Testing.Remote.CloudException CloudException
        {
          get
          {
            return _cloudException;
          }
          set
          {
            __isset.cloudException = true;
            this._cloudException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool cloudException;
        }

        public resumeHazelcastCloudCluster_result()
        {
        }

        public resumeHazelcastCloudCluster_result DeepCopy()
        {
          var tmp449 = new resumeHazelcastCloudCluster_result();
          if((Success != null) && __isset.success)
          {
            tmp449.Success = (global::Hazelcast.Testing.Remote.CloudCluster)this.Success.DeepCopy();
          }
          tmp449.__isset.success = this.__isset.success;
          if((CloudException != null) && __isset.cloudException)
          {
            tmp449.CloudException = (global::Hazelcast.Testing.Remote.CloudException)this.CloudException.DeepCopy();
          }
          tmp449.__isset.cloudException = this.__isset.cloudException;
          return tmp449;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.CloudCluster();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    CloudException = new global::Hazelcast.Testing.Remote.CloudException();
                    await CloudException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp450 = new TStruct("resumeHazelcastCloudCluster_result");
            await oprot.WriteStructBeginAsync(tmp450, cancellationToken);
            var tmp451 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp451.Name = "Success";
                tmp451.Type = TType.Struct;
                tmp451.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp451, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.cloudException)
            {
              if (CloudException != null)
              {
                tmp451.Name = "CloudException";
                tmp451.Type = TType.Struct;
                tmp451.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp451, cancellationToken);
                await CloudException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is resumeHazelcastCloudCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.cloudException == other.__isset.cloudException) && ((!__isset.cloudException) || (global::System.Object.Equals(CloudException, other.CloudException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((CloudException != null) && __isset.cloudException)
            {
              hashcode = (hashcode * 397) + CloudException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp452 = new StringBuilder("resumeHazelcastCloudCluster_result(");
          int tmp453 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp453++) { tmp452.Append(", "); }
            tmp452.Append("Success: ");
            Success.ToString(tmp452);
          }
          if((CloudException != null) && __isset.cloudException)
          {
            if(0 < tmp453++) { tmp452.Append(", "); }
            tmp452.Append("CloudException: ");
            CloudException.ToString(tmp452);
          }
          tmp452.Append(')');
          return tmp452.ToString();
        }
      }


      public partial class deleteHazelcastCloudCluster_args : TBase
      {
        private string _cloudClusterId;

        public string CloudClusterId
        {
          get
          {
            return _cloudClusterId;
          }
          set
          {
            __isset.cloudClusterId = true;
            this._cloudClusterId = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool cloudClusterId;
        }

        public deleteHazelcastCloudCluster_args()
        {
        }

        public deleteHazelcastCloudCluster_args DeepCopy()
        {
          var tmp454 = new deleteHazelcastCloudCluster_args();
          if((CloudClusterId != null) && __isset.cloudClusterId)
          {
            tmp454.CloudClusterId = this.CloudClusterId;
          }
          tmp454.__isset.cloudClusterId = this.__isset.cloudClusterId;
          return tmp454;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    CloudClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp455 = new TStruct("deleteHazelcastCloudCluster_args");
            await oprot.WriteStructBeginAsync(tmp455, cancellationToken);
            var tmp456 = new TField();
            if((CloudClusterId != null) && __isset.cloudClusterId)
            {
              tmp456.Name = "cloudClusterId";
              tmp456.Type = TType.String;
              tmp456.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp456, cancellationToken);
              await oprot.WriteStringAsync(CloudClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteHazelcastCloudCluster_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.cloudClusterId == other.__isset.cloudClusterId) && ((!__isset.cloudClusterId) || (global::System.Object.Equals(CloudClusterId, other.CloudClusterId))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((CloudClusterId != null) && __isset.cloudClusterId)
            {
              hashcode = (hashcode * 397) + CloudClusterId.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp457 = new StringBuilder("deleteHazelcastCloudCluster_args(");
          int tmp458 = 0;
          if((CloudClusterId != null) && __isset.cloudClusterId)
          {
            if(0 < tmp458++) { tmp457.Append(", "); }
            tmp457.Append("CloudClusterId: ");
            CloudClusterId.ToString(tmp457);
          }
          tmp457.Append(')');
          return tmp457.ToString();
        }
      }


      public partial class deleteHazelcastCloudCluster_result : TBase
      {
        private global::Hazelcast.Testing.Remote.CloudException _cloudException;

        public global::Hazelcast.Testing.Remote.CloudException CloudException
        {
          get
          {
            return _cloudException;
          }
          set
          {
            __isset.cloudException = true;
            this._cloudException = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool cloudException;
        }

        public deleteHazelcastCloudCluster_result()
        {
        }

        public deleteHazelcastCloudCluster_result DeepCopy()
        {
          var tmp459 = new deleteHazelcastCloudCluster_result();
          if((CloudException != null) && __isset.cloudException)
          {
            tmp459.CloudException = (global::Hazelcast.Testing.Remote.CloudException)this.CloudException.DeepCopy();
          }
          tmp459.__isset.cloudException = this.__isset.cloudException;
          return tmp459;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    CloudException = new global::Hazelcast.Testing.Remote.CloudException();
                    await CloudException.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp460 = new TStruct("deleteHazelcastCloudCluster_result");
            await oprot.WriteStructBeginAsync(tmp460, cancellationToken);
            var tmp461 = new TField();

            if(this.__isset.cloudException)
            {
              if (CloudException != null)
              {
                tmp461.Name = "CloudException";
                tmp461.Type = TType.Struct;
                tmp461.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp461, cancellationToken);
                await CloudException.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteHazelcastCloudCluster_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.cloudException == other.__isset.cloudException) && ((!__isset.cloudException) || (global::System.Object.Equals(CloudException, other.CloudException))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((CloudException != null) && __isset.cloudException)
            {
              hashcode = (hashcode * 397) + CloudException.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp462 = new StringBuilder("deleteHazelcastCloudCluster_result(");
          int tmp463 = 0;
          if((CloudException != null) && __isset.cloudException)
          {
            if(0 < tmp463++) { tmp462.Append(", "); }
            tmp462.Append("CloudException: ");
            CloudException.ToString(tmp462);
          }
          tmp462.Append(')');
          return tmp462.ToString();
        }
      }


      public partial class executeOnController_args : TBase
      {
        private string _clusterId;
        private string _script;
        private global::Hazelcast.Testing.Remote.Lang _lang;

        public string ClusterId
        {
          get
          {
            return _clusterId;
          }
          set
          {
            __isset.clusterId = true;
            this._clusterId = value;
          }
        }

        public string Script
        {
          get
          {
            return _script;
          }
          set
          {
            __isset.script = true;
            this._script = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::Hazelcast.Testing.Remote.Lang"/>
        /// </summary>
        public global::Hazelcast.Testing.Remote.Lang Lang
        {
          get
          {
            return _lang;
          }
          set
          {
            __isset.lang = true;
            this._lang = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool clusterId;
          public bool script;
          public bool lang;
        }

        public executeOnController_args()
        {
        }

        public executeOnController_args DeepCopy()
        {
          var tmp464 = new executeOnController_args();
          if((ClusterId != null) && __isset.clusterId)
          {
            tmp464.ClusterId = this.ClusterId;
          }
          tmp464.__isset.clusterId = this.__isset.clusterId;
          if((Script != null) && __isset.script)
          {
            tmp464.Script = this.Script;
          }
          tmp464.__isset.script = this.__isset.script;
          if(__isset.lang)
          {
            tmp464.Lang = this.Lang;
          }
          tmp464.__isset.lang = this.__isset.lang;
          return tmp464;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ClusterId = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Script = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Lang = (global::Hazelcast.Testing.Remote.Lang)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp465 = new TStruct("executeOnController_args");
            await oprot.WriteStructBeginAsync(tmp465, cancellationToken);
            var tmp466 = new TField();
            if((ClusterId != null) && __isset.clusterId)
            {
              tmp466.Name = "clusterId";
              tmp466.Type = TType.String;
              tmp466.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp466, cancellationToken);
              await oprot.WriteStringAsync(ClusterId, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Script != null) && __isset.script)
            {
              tmp466.Name = "script";
              tmp466.Type = TType.String;
              tmp466.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp466, cancellationToken);
              await oprot.WriteStringAsync(Script, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.lang)
            {
              tmp466.Name = "lang";
              tmp466.Type = TType.I32;
              tmp466.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp466, cancellationToken);
              await oprot.WriteI32Async((int)Lang, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is executeOnController_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.clusterId == other.__isset.clusterId) && ((!__isset.clusterId) || (global::System.Object.Equals(ClusterId, other.ClusterId))))
            && ((__isset.script == other.__isset.script) && ((!__isset.script) || (global::System.Object.Equals(Script, other.Script))))
            && ((__isset.lang == other.__isset.lang) && ((!__isset.lang) || (global::System.Object.Equals(Lang, other.Lang))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ClusterId != null) && __isset.clusterId)
            {
              hashcode = (hashcode * 397) + ClusterId.GetHashCode();
            }
            if((Script != null) && __isset.script)
            {
              hashcode = (hashcode * 397) + Script.GetHashCode();
            }
            if(__isset.lang)
            {
              hashcode = (hashcode * 397) + Lang.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp467 = new StringBuilder("executeOnController_args(");
          int tmp468 = 0;
          if((ClusterId != null) && __isset.clusterId)
          {
            if(0 < tmp468++) { tmp467.Append(", "); }
            tmp467.Append("ClusterId: ");
            ClusterId.ToString(tmp467);
          }
          if((Script != null) && __isset.script)
          {
            if(0 < tmp468++) { tmp467.Append(", "); }
            tmp467.Append("Script: ");
            Script.ToString(tmp467);
          }
          if(__isset.lang)
          {
            if(0 < tmp468++) { tmp467.Append(", "); }
            tmp467.Append("Lang: ");
            Lang.ToString(tmp467);
          }
          tmp467.Append(')');
          return tmp467.ToString();
        }
      }


      public partial class executeOnController_result : TBase
      {
        private global::Hazelcast.Testing.Remote.Response _success;

        public global::Hazelcast.Testing.Remote.Response Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public executeOnController_result()
        {
        }

        public executeOnController_result DeepCopy()
        {
          var tmp469 = new executeOnController_result();
          if((Success != null) && __isset.success)
          {
            tmp469.Success = (global::Hazelcast.Testing.Remote.Response)this.Success.DeepCopy();
          }
          tmp469.__isset.success = this.__isset.success;
          return tmp469;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Hazelcast.Testing.Remote.Response();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp470 = new TStruct("executeOnController_result");
            await oprot.WriteStructBeginAsync(tmp470, cancellationToken);
            var tmp471 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp471.Name = "Success";
                tmp471.Type = TType.Struct;
                tmp471.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp471, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is executeOnController_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp472 = new StringBuilder("executeOnController_result(");
          int tmp473 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp473++) { tmp472.Append(", "); }
            tmp472.Append("Success: ");
            Success.ToString(tmp472);
          }
          tmp472.Append(')');
          return tmp472.ToString();
        }
      }

    }

  }
}
